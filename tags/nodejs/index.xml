<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>nodejs on Nikaeraintokyo.</title>
    <link>https://nikaera.com/tags/nodejs/</link>
    <description>Recent content in nodejs on Nikaeraintokyo.</description>
    <image>
      <url>https://nikaera.com/cover_image.jpg</url>
      <link>https://nikaera.com/cover_image.jpg</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sun, 05 Dec 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://nikaera.com/tags/nodejs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>📔 ECS Fargate のメトリクスを Prometheus Agent 使って AMP に送って Grafana で監視する</title>
      <link>https://nikaera.com/archives/aws-ecs-fargate-amp-grafana/</link>
      <pubDate>Sun, 05 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://nikaera.com/archives/aws-ecs-fargate-amp-grafana/</guid>
      <description>はじめに この記事は AWS Advent Calendar 2021 の 5 日目の記事です。
Fargate で Node.js アプリのメトリクスを Prometheus Agent をサイドカーコンテナとして動かして、Amazon Managed Service for Prometheus (AMP) に送信して Grafana で見られるようにしてみました。
ちなみに Promethus Agent はまだ 実験的な機能 なため、実務での利用は推奨しません。
本記事の環境構築には AWS CDK を利用しています。
動作環境  Node.js v16.13.0 AWS CDK 2.0.0 (build 4b6ce31) Prometheus 2.32.1  環境構築 早速環境構築を進めていきます。まだ AMP については CDK から操作できないようでしたので、ワークスペースの作成については AWS コンソールから手動で行います。(2021/12/06)
aws-aps を利用することで AWS CDK からでも Amazon Managed Service for Prometheus のワークスペースを作成すること確認できましたので、そちらの利用を推奨いたします&amp;hellip; 🙇🙇
lib/prometheus-agent-test-stack.ts のコードも修正済みで AWS CDK で Amazon Managed Service for Prometheus のワークスペースを作成するように編集しました。(2021/12/18 追記)</description>
    </item>
    
    <item>
      <title>📔 MediaPackage 用の CloudFront ディストリビューションを AWS SDK で作成する</title>
      <link>https://nikaera.com/archives/cloudfront-for-mediapackage/</link>
      <pubDate>Tue, 15 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://nikaera.com/archives/cloudfront-for-mediapackage/</guid>
      <description>はじめに とある事情で MediaPackage のエンドポイント用の CloudFront ディストリビューションを AWS SDK で作成する機会がありました。その際得た知見をソースコードを交えながら備忘録として記事に残しておきます。
本記事内容で紹介しているソースコードは Gist にも同じ内容でアップしてあります。
ちなみに MediaLive + MediaPackage + CloudFront の構成でインフラ構築したい場合は、CloudFormation が MediaPackage にも対応したので CloudFormation の利用を推奨します。
本記事内容はあくまでも何らかの事情で、後から CloudFront ディストリビューションを MediaPackage エンドポイントに紐づけたいケース等で参考になると思われます。
実装内容 作成したソースコードの内容は下記になります。 最下部の createDistributionForMediaPackage が本記事タイトルに該当する関数です。
import { CloudFront } from &amp;#34;aws-sdk&amp;#34;; import * as url from &amp;#34;url&amp;#34;; import { CreateDistributionWithTagsResult, GetDistributionResult, UpdateDistributionResult } from &amp;#34;aws-sdk/clients/cloudfront&amp;#34;; export class CloudFrontClientForMediaPackage { private cloudFront: CloudFront; constructor() { this.cloudFront = new CloudFront({ region: &amp;#34;ap-northeast-1&amp;#34;, apiVersion: &amp;#39;2020-05-31&amp;#39;, }); } /** * CloudFront ディストリビューションの情報を取得するために利用する * @param id CloudFront ディストリビューションの ID * @return ディストリビューションの情報を取得する */ async getDistribution(id: string): Promise&amp;lt;GetDistributionResult&amp;gt; { const distribution = await this.</description>
    </item>
    
    <item>
      <title>📔 Serverless のプラグインを TypeScript で作成する方法</title>
      <link>https://nikaera.com/archives/serverless-typescript-plugin/</link>
      <pubDate>Sun, 08 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://nikaera.com/archives/serverless-typescript-plugin/</guid>
      <description>はじめに Serverless Framework を使っていて、度々デプロイ時に手動で設定していた作業内容を自動化したいなと思い、プラグイン作成の知識習得も兼ねてライブラリを作成し NPM で公開してみました。
https://www.npmjs.com/package/serverless-amplify-auth
今後も開発する可能性はありそうなので Serverless のプラグインを TypeScript で作成する際の手順をまとめておきました。各手順はザックリと紹介しつつ、主にその過程でハマった点や工夫した点に重きをおいて記事を書いていきます。
動作環境  Node.js 12.19.0 Serverless Framework  Framework Core: 2.10.0 Plugin: 4.1.1 SDK: 2.3.2 Components: 3.3.0    開発環境を整える 本記事の内容を最後まで実践した際の最終的なプロジェクトのディレクトリ構造は下記になります。
tree -I node_modules -L 2 ./ ./ ├── example # ライブラリの動作検証用のサンプルコードを配置するフォルダ │ ├── handler.js │ ├── package.json │ └── serverless.yml ├── lib # src フォルダ内のファイルをコンパイルした結果を配置するフォルダ (ライブラリとして利用する際に含まれるソースコード群) │ ├── index.js │ └── index.js.map ├── package-lock.json ├── package.json ├── src # Serverless プラグインのソースコードを配置するフォルダ │ └── index.</description>
    </item>
    
  </channel>
</rss>
