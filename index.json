[{"content":"はじめに 📝 最近とある事情により Twitter の DM を利用しているのですが、Slack などのように絵文字をショートカット入力できないことにフラストレーションが溜まってきていました。そのため、絵文字をショトカで入力可能にしてくれる Chrome 拡張機能を探したのですが見つけられませんでした。\n無いなら作ろうということで Teemo を開発しました。\nソースコードは GitHub 上で公開しています。 何かご要望等ございましたら PR や Issue 作成頂けますと喜びます。\nTeemo の実際の挙動については下記の動画で確認できます 🎥   考えていたこと 💭 今回 Teemo の開発を行うに当たり、考えていた点は下記になります。\n よくある : 入力からの絵文字ショートカットを導入する  Slack や GitHub、JIRA などではおなじみの入力方法 ⌨️   パレットから選択する際は半角英数字で検索できるようにしたい  Twitter では日本語で検索しないと絵文字が探せない 🔍 普段英数字で絵文字検索をするので目的の絵文字が見つけづらい 🕵️   拡張機能を利用することで文章入力の煩わしさが増加することは避けたい  コピペや文章クリアの機能等にもショトカ利用できるようにしたい 💨    プロトタイピングしながら友人に進捗をシェアしながら開発は進めていきました。本当は個人で利用する想定で進めていたのですが、割と評判が良かったため Chrome ウェブストアに公開するのを目標に動いていました。そして、Chrome ウェブストアで公開できるクオリティを目指して動いたことで満足のいく拡張機能が作れました。\n使い方 ⚒️ Teemo の使い方について紹介いたします。\nTeemo を Chrome 拡張機能として追加する まずは Chrome ウェブストア にアクセスして、Teemo を Chrome に追加する必要があります。\n1. Chrome ウェブストア にアクセスして右上の Chrome に追加 ボタンをクリックする\n2. 拡張機能として Teemo の追加が完了したら、ツールバーのアイコンをクリックするか Ctrl or Cmd + Shift + O を入力して Teemo のエディタが開くことを確認する\n上記確認できれば Teemo が正常に Chrome 拡張機能として追加できています。\nTeemo で絵文字を : でショートカット入力する Teemo のエディタでは : を利用することで文章入力を止めることなく、シームレスに絵文字入力が行えます。: を入力後、関連ワードを半角英数字で入力することで絵文字候補がウィンドウ下部に表示されます。入力したい絵文字をマウスかキーボードの矢印キーで選択して入力できます。\n: を入力後、関連ワードを半角英数字で入力することで絵文字候補がウィンドウ下部に表示される 💨\nTeemo で絵文字をパレットから選択して入力する 絵文字をパレットから選択して入力するには Ctrl or Cmd + E キーを入力するか、ウィンドウ下部の真ん中にある 🎨 ボタンをクリックしてパレットを表示する必要があります。ちなみに絵文字選択用のパレットには OSS の Emoji Mart を利用しています。\nパレットで関連ワードを入力することで絵文字検索ができる。絵文字をクリックすることで入力できる 🐱\nTeemo で入力した文章をクリップボードにコピーする 入力した文章は Ctrl or Cmd + C キーを入力するか、ウィンドウ下部の右にある 📋 ボタンをクリックすることで全文コピーが可能です。わざわざ範囲選択を行わずとも文章を全文コピーすることができます。コピーが正常にできるとウィンドウ下部の真ん中にある 📋 ボタンが 📋✔️ ボタンになります。\nTeemo で文章入力後 Ctrl + C で全文コピー後、ツイート編集画面にペーストした時の様子 🐦\nTeemo で入力した文章をクリアする Teemo では単一のウィンドウを使い回すため、改めて文章を作成する際に一度入力した文章をクリアする必要があります。そのため、Ctrl or Cmd + R キーを入力するか、ウィンドウ下部の左にある 🆕 ボタンをクリックすることで文章をクリアできるようにしています。\nTeemo の入力欄を 🆕 ボタンをクリックしてクリアした時の様子 🧼\nおわりに 個人的に Teemo のおかげで、Twitter での絵文字を利用した文章作成についてストレス無く出来るようになったので良かったです。副次的な効果として、どんなサイトでも絵文字を利用した文章作成が簡単に出来るようになったため、他に絵文字をショートカット入力できないサイトがあったとしても同様の困りごとは発生しなくなりました。☺️\nSNS 上などで文章を作成する際に絵文字を頻繁に利用する方には割とご満足いただける拡張機能になっているはずです 🙋\n","permalink":"https://nikaera.com/archives/teemo-first-release/","summary":"はじめに 📝 最近とある事情により Twitter の DM を利用しているのですが、Slack などのように絵文字をショートカット入力できないことにフラストレーションが溜まってきていました。そのため、絵文字をショトカで入力可能にしてくれる Chrome 拡張機能を探したのですが見つけられませんでした。\n無いなら作ろうということで Teemo を開発しました。\nソースコードは GitHub 上で公開しています。 何かご要望等ございましたら PR や Issue 作成頂けますと喜びます。\nTeemo の実際の挙動については下記の動画で確認できます 🎥   考えていたこと 💭 今回 Teemo の開発を行うに当たり、考えていた点は下記になります。\n よくある : 入力からの絵文字ショートカットを導入する  Slack や GitHub、JIRA などではおなじみの入力方法 ⌨️   パレットから選択する際は半角英数字で検索できるようにしたい  Twitter では日本語で検索しないと絵文字が探せない 🔍 普段英数字で絵文字検索をするので目的の絵文字が見つけづらい 🕵️   拡張機能を利用することで文章入力の煩わしさが増加することは避けたい  コピペや文章クリアの機能等にもショトカ利用できるようにしたい 💨    プロトタイピングしながら友人に進捗をシェアしながら開発は進めていきました。本当は個人で利用する想定で進めていたのですが、割と評判が良かったため Chrome ウェブストアに公開するのを目標に動いていました。そして、Chrome ウェブストアで公開できるクオリティを目指して動いたことで満足のいく拡張機能が作れました。\n使い方 ⚒️ Teemo の使い方について紹介いたします。\nTeemo を Chrome 拡張機能として追加する まずは Chrome ウェブストア にアクセスして、Teemo を Chrome に追加する必要があります。","title":"📔 チャットの短文作成に便利な Chrome 拡張機能を開発してみた"},{"content":"はじめに 先日同僚が Unity の CI 環境を構築するためのライブラリである GameCI について教えてくれました。早速 GameCI の GitHub Actions を利用して、サンプルプロジェクトで色々動作検証してみたところ、Unity の CI 環境を楽に構築できることが分かりました。\nもちろん、Unity Cloud Build を利用すれば CI 環境の構築は以前から楽にできました。しかし、選択肢の 1 つとして GameCI を持っておくことで、サクッと GitHub Actions に統合する形で Unity の CI 環境を導入できるのは他には無いメリットを感じました。\n本記事で紹介しているソースコード、及び検証時に利用したプロジェクトは GitHub にアップ済みですので、手っ取り早く内容を把握されたい方は下記をご参照くださいませ。\nhttps://github.com/nikaera/Unity-GameCI-Sample\n業務でも利用できそうなので、GameCI を利用して CI 環境を構築する手順を記事でまとめました。\nGameCI に備わっている機能紹介 GameCI には現状下記の GitHub Actions が用意されているようです。\n   機能 概要     Activation Unity ライセンスを任意の Unity バージョンで発行する   Test runner Unity の PlayMode 及び EditMode のテストを実行する (テスト結果の出力にも対応)   Builder 任意の Platform ビルドを実行する (アーティファクト 利用でダウンロードも可能)   Returning a license Unity ライセンスの返却ができる (Professional License のみ対応)   Remote builder GitHub Actions のスペックでは満足のいくビルドができない際に AWS 環境でハイスペックなマシンを用意してビルドできる。ビルドのためのインフラ構築には AWS CloudFormation を使用している (現在は AWS のみ対応。今後 GCP, Azure にも対応予定とのこと)   Deployment Unity ビルドを各種 Platform 向けにデプロイする (iOS 及び Android のみ記載あり。厳密に言うと Builder でビルド出力した内容を fastlane を用いてデプロイするためのワークフロー紹介になっている)    上記を見ると既に GameCI には開発者として Unity CI に欲しい機能は最低限揃っているように見受けられました。 また本記事では、今後機会があれば試してみたいと考えていますが Remote builder 及び Deployment については言及していません。\n今回は実例を交えながら Activation 及び Test runner、Builder、Returning a license の使用方法について紹介していきます。\nActivation: GameCI で必要となる Unity License のアクティベーションを行う GameCI で Unity ライセンスをアクティベートするには Activation を利用します。早速ドキュメントの手順に沿って作業を進めていきます。\nまず CI を導入したい GitHub 上の Unity プロジェクトの .github/workflows 内に Unity ライセンスアクティベート用のワークフローファイルを作成します。\nname: Acquire activation file on: workflow_dispatch: {} jobs: activation: name: Request manual activation file 🔑 runs-on: ubuntu-latest steps: # GameCI の Activation を利用して alf ファイルを発行する - name: Request manual activation file id: getManualLicenseFile uses: game-ci/unity-request-activation-file@v2 with: # Unity プロジェクトのバージョンを指定する # ProjectSettings/ProjectVersion.txt に記載されているバージョンを入力すれば OK unityVersion: 2020.3.5f1 # Upload artifact (Unity_v20XX.X.XXXX.alf) - name: Expose as artifact uses: actions/upload-artifact@v2 with: name: ${{ steps.getManualLicenseFile.outputs.filePath }} path: ${{ steps.getManualLicenseFile.outputs.filePath }} その後、デフォルトブランチ にプッシュして GitHub Actions で実行可能にしたら、下記手順に従い Unity ライセンスファイルのアクティベート及びダウンロードを行います。\n1. ブラウザから GitHub リポジトリにアクセスして、Unity ライセンスアクティベート用のワークフローを実行して alf ファイルを生成する\n2. ワークフローの実行に成功したら、該当項目をクリックして詳細画面に遷移する\n3. Artifacts の項目から alf ファイルをダウンロードする\n4. Unity license manual activation webpage からログインして alf ファイルをアップロードする\n5. Unity ライセンスの利用用途に応じて適切な選択肢を入力する (本記事では Personal ライセンスを選択)\n6. Download license ボタンをクリックして ulf ファイルをダウンロードする\nこれで Unity ライセンスファイルのアクティベートは完了です。次にアクティベートしたライセンスファイルを GitHub リポジトリの Secrets に登録して、GameCI で PlayMode 及び EditMode のテストが実行できるようにしていきます。\n::: message\nalf 拡張子のファイルがライセンスリクエストファイルを指していて、Unity ライセンスの発行に必要となるファイルです。ulf 拡張子のファイルが Unity ライセンスのファイルです。1\n:::\nTest runner: PlayMode 及び EditMode テストを実行して結果を参照する GitHub Actions 上でテストを実行するために、先ほどアクティベートした Unity ライセンスの情報を ワークフロー上で扱えるようにする必要があります。そのため、まずは Secrets に ulf ファイルの内容を登録することから始めます。\n1. Unity ライセンスの情報登録のため、Github リポジトリの Secrets 登録画面に遷移する\n2. GameCI はライセンス情報参照のため、デフォルト設定では Secrets の UNITY_LICENSE を参照する。そのため、Name が UNITY_LICENSE、Value には ulf ファイルの中身を登録する2\n上記作業で GameCI でテストやビルド実行を行える環境が整ったので、動作検証のためテスト実行用のワークフローファイルを作成します。\nname: Run EditMode and PlayMode Test on: workflow_dispatch: {} jobs: test: name: Run EditMode and PlayMode Test runs-on: ubuntu-latest steps: # actions/checkout@v2 を利用して作業ディレクトリに # Unity プロジェクトの中身をダウンロードしてくる - name: Check out my unity project. uses: actions/checkout@v2 # GameCI の Test runner を利用して # EditMode 及び PlayMode のテストを実行する - name: Run EditMode and PlayMode Test uses: game-ci/unity-test-runner@v2 env: # 2. の手順で Secrets に登録した Unity ライセンスの情報を指定する UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }} # もし Professional license を使いたい場合は、 # メールアドレス、パスワード、シリアルナンバーを入力する必要がある # ref: https://game.ci/docs/github/test-runner#professional-license # UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }} # UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }} # UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }} with: projectPath: . # テストの実行結果もみたい場合は githubToken を指定する # secrets.GITHUB_TOKEN は Secrets 未登録でも利用可能 githubToken: ${{ secrets.GITHUB_TOKEN }} # Unity プロジェクトのバージョンを指定する # ProjectSettings/ProjectVersion.txt に記載されているバージョンを入力すれば OK unityVersion: 2020.3.5f1 # 実行したいテストの種類を指定できる # 指定可能な値は All, PlayMode, EditMode # testMode: All # テスト実行時に利用したい Docker イメージを明示的に指定できる # customImage: \u0026#39;unityci/editor:2020.1.14f1-base-0\u0026#39; # テストの実行結果をアーティファクトにアップロードしてダウンロードして参照できるようにする - uses: actions/upload-artifact@v2 if: always() with: name: Test results path: artifacts 上記のワークフローファイルを GitHub Actions 上で動作検証する際の手順は下記になります。\n1. Unity のテストを実行するためのワークフローを選択して実行する\n2. ワークフローの実行が成功したら、詳細画面に遷移した後、Test Results の項目からテストの実行結果を確認する\nテスト実行用のワークフローファイルでは workflow_dispatch で実行可能にしていますが、pull_request を利用すればプルリク時にテストを実行させることが可能になります。\nBuilder: プロジェクトのビルドを実行して出力結果を確認する GameCI にはプロジェクトのビルドを行うための GitHub Actions も用意されています。実際に GameCI で WebGL ビルドを行いその内容を GitHub Pages で確認できるようにして動作検証していきます。\n早速 WebGL ビルドを行うためのワークフローファイルを作成していきます。\nname: Run the WebGL build on: workflow_dispatch: {} jobs: build: name: Run the WebGL build runs-on: ubuntu-latest steps: # actions/checkout@v2 を利用して作業ディレクトリに # Unity プロジェクトの中身をダウンロードしてくる - name: Check out my unity project. uses: actions/checkout@v2 # GameCI の Builder を利用して、 # Unity プロジェクトのビルドを実行する - name: Run the WebGL build uses: game-ci/unity-builder@v2 env: UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }} with: # 今回は WebGL ビルドを行いたいため WebGL を指定する # WebGL 以外の指定可能な値は下記に記載の値が利用可能 # ref: https://docs.unity3d.com/ScriptReference/BuildTarget.html targetPlatform: WebGL unityVersion: 2020.3.5f1 # Builder で出力した WebGL ビルドを GitHub Pages にデプロイする - name: Deploy to GitHub Pages uses: JamesIves/github-pages-deploy-action@4.1.3 with: # GitHub Pages デプロイ用の Orphan ブランチ名を指定する branch: gh-pages # デプロイ用ビルドフォルダパスを指定する # GameCI の Builder はデフォルトでは build フォルダにビルド内容を出力する folder: build # Builder で出力した WebGL ビルドをアーティファクトでダウンロード可能にする - name: Upload the WebGL Build uses: actions/upload-artifact@v2 with: name: Build path: build 上記のワークフローファイルを GitHub Actions 上で動作検証する際の手順は下記になります。\n1. Unity の WebGL ビルドを実行するためのワークフローを実行する\n2. ワークフローの実行が成功したら、詳細画面に遷移した後、ビルド内容が正常そうか確認する\n3. ビルド内容を確認するための GitHub Pages の設定を Settings から行う\n4. GitHub Pages でブラウザから WebGL ビルドの動作確認をする\n上記のように Builder を利用することで WebGL ビルドの成否及び、最新のビルド内容を常に GitHub Pages で見られるようにできます。 すると WebGL ビルドが正常かどうかの確認が常に GitHub Pages を見れば把握できるようになるため、Unity1 週間ゲームジャム などに参加する際で便利に活用できそうです。\n:::message\nWebGL ビルドを行う際、Unity バージョンやアセットの対応状況によっては正しくブラウザ上で動作しないビルドが出力されます。ただし、ブラウザで発生するエラー内容によっては WebGL のビルド設定を見直すだけで解決できる場合があります。 例えば unityframework is not defined というエラーが発生した際は、この記事 のように WebGL の Build Settings を見直すことで解決できる場合があります。\n:::\n:::message\n私の環境では JamesIves/github-pages-deploy-action で GitHub Pages へのデプロイを行った際、デフォルトでは /WebGL/WebGL フォルダにビルド内容が出力されました。そのため、ブラウザから WebGL ビルドにアクセスする際、\u0026lt;GitHub Pages の URL\u0026gt;/WebGL/WebGL のような URL にアクセスする必要がありました。\n:::\nReturning a license: GameCI で利用している Unity License を返却する 通常利用することは無いと公式サイトにも書かれていますが、Professional License の返却も GameCI で行うことが可能です。 今回は Personal License を利用したため使用しませんでしたが、下記をワークフローのステップに組み込むことで Professional License を返却できるようです。\n# ... # どこかのタイミングでライセンスのアクティベートを行う - name: Activate Unity uses: game-ci/unity-activate@v1 env: UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }} #... # ステップの最後などに game-ci/unity-return-license@v1 を呼び出して # アクティベート済みのライセンスを返却する - name: Return license uses: game-ci/unity-return-license@v1 if: always() おわりに 以前 Unity コマンドを駆使して自分で CI 環境を構築した経験があるのですが、 GameCI を利用した方が全然楽に Unity CI 環境構築を GitHub Actions 上で行えました。\nちなみに GameCI で利用されている Docker イメージ は以前からよく使われていた gableroux/unity3d が元になっているようでした。ってか GabLeRoux さんのホームページ を見たら、GameCI の開発を始めた方のようでした。すごい。\n本記事が GitHub Actions で Unity CI 環境構築を始めようとしている方の助けになれれば幸いです。\n参考リンク  GameCI - The fastest and easiest way to automatically test and build your game projects Services - Cloud Build - Unity AWS CloudFormation（テンプレートを使ったリソースのモデル化と管理）| AWS fastlane - App automation done right リポジトリのデフォルトブランチ名を管理する - GitHub Docs Unity でパーソナルライセンスのシリアルナンバーを発行する | Yucchiy\u0026rsquo;s Note Unity license manual activation webpage 暗号化されたシークレット - GitHub Docs Unity - Scripting API: BuildTarget Unity 1 週間ゲームジャム | フリーゲーム投稿サイト unityroom Unity2020 WebGL 9 割まで読み込めるがアプリが起動しない不具合の解決方法 - Qiita Deploy to GitHub Pages · Actions · GitHub Marketplace    alf ファイル及び ulf ファイルの実態は XML ファイルです。 \u0026#x21a9;\u0026#xfe0e;\n 適当なテキストエディタで ulf ファイルを開き全文をコピー \u0026amp; ペーストします。 \u0026#x21a9;\u0026#xfe0e;\n   ","permalink":"https://nikaera.com/archives/unity-gameci-github-actions/","summary":"はじめに 先日同僚が Unity の CI 環境を構築するためのライブラリである GameCI について教えてくれました。早速 GameCI の GitHub Actions を利用して、サンプルプロジェクトで色々動作検証してみたところ、Unity の CI 環境を楽に構築できることが分かりました。\nもちろん、Unity Cloud Build を利用すれば CI 環境の構築は以前から楽にできました。しかし、選択肢の 1 つとして GameCI を持っておくことで、サクッと GitHub Actions に統合する形で Unity の CI 環境を導入できるのは他には無いメリットを感じました。\n本記事で紹介しているソースコード、及び検証時に利用したプロジェクトは GitHub にアップ済みですので、手っ取り早く内容を把握されたい方は下記をご参照くださいませ。\nhttps://github.com/nikaera/Unity-GameCI-Sample\n業務でも利用できそうなので、GameCI を利用して CI 環境を構築する手順を記事でまとめました。\nGameCI に備わっている機能紹介 GameCI には現状下記の GitHub Actions が用意されているようです。\n   機能 概要     Activation Unity ライセンスを任意の Unity バージョンで発行する   Test runner Unity の PlayMode 及び EditMode のテストを実行する (テスト結果の出力にも対応)   Builder 任意の Platform ビルドを実行する (アーティファクト 利用でダウンロードも可能)   Returning a license Unity ライセンスの返却ができる (Professional License のみ対応)   Remote builder GitHub Actions のスペックでは満足のいくビルドができない際に AWS 環境でハイスペックなマシンを用意してビルドできる。ビルドのためのインフラ構築には AWS CloudFormation を使用している (現在は AWS のみ対応。今後 GCP, Azure にも対応予定とのこと)   Deployment Unity ビルドを各種 Platform 向けにデプロイする (iOS 及び Android のみ記載あり。厳密に言うと Builder でビルド出力した内容を fastlane を用いてデプロイするためのワークフロー紹介になっている)    上記を見ると既に GameCI には開発者として Unity CI に欲しい機能は最低限揃っているように見受けられました。 また本記事では、今後機会があれば試してみたいと考えていますが Remote builder 及び Deployment については言及していません。","title":"📔 GameCI で Unity の CI 環境を GitHub Actions で構築する"},{"content":"MySQL を利用する Rails プロジェクトを起動しようとしたところ、下記のエラーが発生しました。\nbin/rails s # データベースアダプターには mysql2 を選択している状態なのに postgresql で接続しようとしている Error loading the \u0026#39;postgresql\u0026#39; Active Record adapter. Missing a gem it depends on? pg is not part of the bundle. Add it to your Gemfile. (LoadError) # config/database.yml ファイルの中身一部抜粋 # mysql2 をデータベースアダプターとして利用しているため、 # PostgreSQL 接続のための pg ライブラリの追加を求めるエラーが発生しているのは何かおかしい。。 default: \u0026amp;default adapter: mysql2 #... 何でや、、と思い Rails のドキュメントを読んでいた所、公式サイトに Connection Preference に関する記述を見つけました。\n Since pool is not in the ENV[\u0026lsquo;DATABASE_URL\u0026rsquo;] provided connection information its information is merged in. Since adapter is duplicate, the ENV[\u0026lsquo;DATABASE_URL\u0026rsquo;] connection information wins.\n どうやら config/database.yml と ENV['DATABASE_URL'] の両方が設定されている場合、設定値に重複がある項目については ENV['DATABASE_URL'] の値が優先されるようでした。\n今回は DATABASE_URL に下記の PostgreSQL URL が設定されてしまっていたため、config/database.yml では MySQL を利用していたのにも関わらず、データベースアダプターに PostgreSQL が使われてしまっていたようです。\nenv | grep DATABASE_URL # 環境変数 DATABASE_URL に PostgreSQL の URL が設定されている DATABASE_URL=postgresql://user:password@localhost:5432/something_development そのため、DATABASE_URL の中身を空にすることで、本来の意図通りに config/database.yml の設定を反映させることができました。\n# 筆者は fish を利用しているので set -e で環境変数を空にした set -e DATABASE_URL # 何も出力されないことを確認し DATABASE_URL が空であることを確認する env | grep DATABASE_URL # Rails サーバーが正常に起動するか再度確認する bin/rails s #... # 無事アプリケーションサーバーが起動すること確認できれば OK =\u0026gt; Booting Puma =\u0026gt; Rails 6.0.3.6 application starting in development =\u0026gt; Run `rails server --help` for more startup options Puma starting in single mode... * Version 4.3.7 (ruby 2.6.1-p33), codename: Mysterious Traveller * Min threads: 5, max threads: 5 * Environment: development * Listening on tcp://127.0.0.1:3000 * Listening on tcp://[::1]:3000 Use Ctrl-C to stop 今回はたまたま別プロジェクトでゴニョゴニョ作業をしていた名残で環境変数 DATABASE_URL が設定されてしまっていて、かつそのままの流れで Rails プロジェクトで作業していたため遭遇してしまいました。。\nローカル環境で変数を設定する際は direnv や dotenv 等を利用して極力手動では環境変数をいじらないようにしようと思いました (所感)\n参考リンク  Configuring Rails Applications — Ruby on Rails Guides  ","permalink":"https://nikaera.com/archives/rails-database-url/","summary":"MySQL を利用する Rails プロジェクトを起動しようとしたところ、下記のエラーが発生しました。\nbin/rails s # データベースアダプターには mysql2 を選択している状態なのに postgresql で接続しようとしている Error loading the \u0026#39;postgresql\u0026#39; Active Record adapter. Missing a gem it depends on? pg is not part of the bundle. Add it to your Gemfile. (LoadError) # config/database.yml ファイルの中身一部抜粋 # mysql2 をデータベースアダプターとして利用しているため、 # PostgreSQL 接続のための pg ライブラリの追加を求めるエラーが発生しているのは何かおかしい。。 default: \u0026amp;default adapter: mysql2 #... 何でや、、と思い Rails のドキュメントを読んでいた所、公式サイトに Connection Preference に関する記述を見つけました。\n Since pool is not in the ENV[\u0026lsquo;DATABASE_URL\u0026rsquo;] provided connection information its information is merged in.","title":"📝 Rails で config/database.yml よりも ENV['DATABASE_URL'] の設定が優先される話"},{"content":"はじめに 縦書きテキストを画像に埋め込みたいと頼まれたので、\nPython 製の画像処理ライブラリ Pillow を使ってサクッと実装してみました。\n一応ソースコードは Gist にもアップ済みです ✍️\nhttps://gist.github.com/nikaera/c1049708ff548b06cab0ae377adc4ac7\n動作環境  Python 3.9.5 Pillow 8.2.0  画像に縦書きテキストを埋め込む まずは今回利用する Pillow を予めインストールしておきます。\npip install Pillow その後 main.py を作成して下記を入力します。\nテキストを埋め込みたい画像を main.py と同じフォルダに sample.jpeg という名前で配置しておきます。\n# Pillow の利用するモジュールのみをインポートする from PIL import Image, ImageDraw, ImageFont # 読み込みたいフォント情報を入力する font_name = \u0026#34;/System/Library/Fonts/ヒラギノ角ゴシック W0.ttc\u0026#34; font_size = 48 font = ImageFont.truetype(font_name, font_size) # テキストを埋め込みたい画像 sample.jpeg を読み込む im = Image.open(\u0026#39;sample.jpeg\u0026#39;) d = ImageDraw.Draw(im) # 画像に埋め込みたいテキスト情報を入力する # (後述するが、改行コードには未対応) text = \u0026#34;bifdLcFCKXtFJZmPZhzdefjhhYTtuJPAYsR\u0026#34; # 文章を改行するまでの文字数を入力する split_number = 11 # split_number で指定した文字数ごとに分割され配列に格納される # ref: https://qiita.com/yasunori/items/551a7c20ef9b81474e2a splits = [text[i: i+split_number] for i in range(0, len(text), split_number)] # 画像の width を読み込み、画像の右端の座標を取得する # top_right_margin には余白を設定する (描画領域の端が画像の端と被ってしまうため) w, _ = im.size top_right_margin = 13 right_edge = w - top_right_margin # テキストの入力領域に端が赤い四角形を描画する d.rectangle((right_edge, top_right_margin, right_edge - font_size * len(splits), font_size * split_number + top_right_margin), fill=(255, 255, 255), outline=(255, 0, 0)) # 分割した文章を上記四角形内に左にずらしながら縦書き入力する for index, item in enumerate(splits): d.text((right_edge - (font_size / 2) - font_size * index, top_right_margin), item, fill=\u0026#34;black\u0026#34;, anchor=\u0026#34;mt\u0026#34;, font=font, direction=\u0026#34;ttb\u0026#34;) # 縦書きテキストを埋め込んだ画像を test.png として出力する im.save(\u0026#34;test.png\u0026#34;) 上記ソースコード内で特筆すべき事項として d.text があります。1\nまず anchor オプション で文字を横中央に寄せて、縦を上端に寄せるよう設定しています。\n更に direction オプション を利用することで、文字列を縦に入力しています。縦に入力するためのオプションとして ttb を入力しています。\n実際に main.py を実行した際に生成される画像は下記のとおりです。\nテキストを埋め込む前の画像\nmain.py を実行してテキストを埋め込んだ画像\nおわりに 今回は Pillow を用いて縦書きテキストの画像埋め込みを実装しましたが、 ブラウザベースで埋め込みをやりたい場合は html2canvas からの png 出力ダウンロードで実装できそうでした。(ただその場合は各種ブラウザ対応とかモバイル対応が大変そう。。 👀)\n参考リンク  Pillow — Pillow (PIL Fork) 8.2.0 documentation Text anchors — Pillow (PIL Fork) 8.2.0 documentation ImageDraw Module — Pillow (PIL Fork) 8.2.0 documentation Pillow を日本語縦書きに対応させる - Qiita Embedding Japanese vertical writing characters into an image using Pillow.    当初は multiline_text 関数 を用いて改行にも対応した形でテキスト埋め込みを実装する予定でした。しかし、ValueError: ttb direction is unsupported for multiline text というエラーが発生してしまい multiline_text 関数の利用は断念しました。。😭 \u0026#x21a9;\u0026#xfe0e;\n   ","permalink":"https://nikaera.com/archives/pillow-vertical-writing/","summary":"はじめに 縦書きテキストを画像に埋め込みたいと頼まれたので、\nPython 製の画像処理ライブラリ Pillow を使ってサクッと実装してみました。\n一応ソースコードは Gist にもアップ済みです ✍️\nhttps://gist.github.com/nikaera/c1049708ff548b06cab0ae377adc4ac7\n動作環境  Python 3.9.5 Pillow 8.2.0  画像に縦書きテキストを埋め込む まずは今回利用する Pillow を予めインストールしておきます。\npip install Pillow その後 main.py を作成して下記を入力します。\nテキストを埋め込みたい画像を main.py と同じフォルダに sample.jpeg という名前で配置しておきます。\n# Pillow の利用するモジュールのみをインポートする from PIL import Image, ImageDraw, ImageFont # 読み込みたいフォント情報を入力する font_name = \u0026#34;/System/Library/Fonts/ヒラギノ角ゴシック W0.ttc\u0026#34; font_size = 48 font = ImageFont.truetype(font_name, font_size) # テキストを埋め込みたい画像 sample.jpeg を読み込む im = Image.open(\u0026#39;sample.jpeg\u0026#39;) d = ImageDraw.Draw(im) # 画像に埋め込みたいテキスト情報を入力する # (後述するが、改行コードには未対応) text = \u0026#34;bifdLcFCKXtFJZmPZhzdefjhhYTtuJPAYsR\u0026#34; # 文章を改行するまでの文字数を入力する split_number = 11 # split_number で指定した文字数ごとに分割され配列に格納される # ref: https://qiita.","title":"📝 Pillow を使って画像に縦書きテキストを埋め込む"},{"content":"はじめに PlayFab で CloudFunction を利用しているときに API 制限に引っかかってしまいました。負荷テストをした際に初めて気づいたのですが、公式ページにも言及が無かったため発覚が遅れてしまいました。そのため、PlayFab に依存していた機能を部分的に外す必要が出てきてしまい苦労しました。\n本記事では、上記のような事態に陥る方を減らすため、API 制限に気づくまでの軌跡を辿りながら、PlayFab の CloudFunction を利用する際の注意点について、記事として残しておきたいと思います。\nPlayFab の API 制限に引っかかった要因 PlayFab の CloudFunction を利用すると、PlayFab 経由で独自 Web API を実行することが可能になります。また、CloudFunction 経由で独自 Web API を実行すると、PlayFab ユーザ情報が含まれたパラメタが含まれた状態でリクエストが飛んでくるため、その情報を利用することでサーバーサイドで PlayFab の操作を行うことが出来るようになり大変便利です。\nそのため、あるプロジェクトでは PlayFab CloudFunction を Azure Function や AWS Lambda のような FaaS を使っている感じで利用しておりました。そして、その利用の仕方は誤りであったことに後々気づきます\u0026hellip;\n負荷テストを実装するフェーズで CloudFunction を大量に叩いてみる PlayFab の CloudFunction を実行するにあたり利用した PlayFab の API は Server-Side Cloud Script - Execute Function というものになります。\n同接 2000 人想定で負荷テストのシナリオを実装することが求められていたため、その通りシンプルに 2000 件同時に Server-Side Cloud Script - Execute Function を実行するシナリオを Gatling で組んでみました。すると、何回やっても数十件以上は必ずエラーが発生していることが分かりました。\n# Gatling で負荷テストを実行した際に 50件失敗している様子 ================================================================================ ---- Global Information -------------------------------------------------------- \u0026gt; request count 2000 (OK=1950 KO=50 ) \u0026gt; min response time 320 (OK=320 KO=354 ) \u0026gt; max response time 14459 (OK=9723 KO=14459 ) \u0026gt; mean response time 998 (OK=934 KO=3485 ) \u0026gt; std deviation 1510 (OK=1304 KO=4310 ) \u0026gt; response time 50th percentile 545 (OK=543 KO=656 ) \u0026gt; response time 75th percentile 1085 (OK=1077 KO=7209 ) \u0026gt; response time 95th percentile 2243 (OK=2029 KO=10210 ) \u0026gt; response time 99th percentile 7947 (OK=7775 KO=14353 ) \u0026gt; mean requests/sec 100 (OK=97.5 KO=2.5 ) ---- Response Time Distribution ------------------------------------------------ \u0026gt; t \u0026lt; 800 ms 1393 ( 70%) \u0026gt; 800 ms \u0026lt; t \u0026lt; 1200 ms 367 ( 18%) \u0026gt; t \u0026gt; 1200 ms 190 ( 10%) \u0026gt; failed 50 ( 3%) ---- Errors -------------------------------------------------------------------- \u0026gt; status.find.is(200), but actually found 400 50 (100.0%) ================================================================================ 正直 2000件程度の API アクセスであれば、何の問題もなく負荷テストが通ると考えていたので、この結果には驚きました。原因は何なのか調べたところ、Azure Function で PlayFab ユーザ認証を行うために利用していた Authentication - Validate Entity Token で 503 エラーが発生していることが分かりました。\n少ない API 実行件数で負荷テストを実行する場合は問題ないのですが、件数が一定数超えたタイミングで 503 エラーが返却されるようになってしまいます。しかし、たまに同じ件数を実行しているはずなのにスムーズに全件 API 実行に成功することもありました。これは何らかのレートリミット等に引っかかっているのかも知れないということで調査したところ、次の事実が判明しました。\nCloudFunction は FaaS の用途には適さない どうやら PlayFab 公式フォーラムの ある投稿 によると、PlayFab の Server API を呼び出す際は 10秒間に 1000回という制限があるようでした。 そして、この制限を突破するには商用のための契約をした後にインスタンス割当に関する交渉をすることで可能になるかも知れないとのことでした。\n Servers are rate limited to 1,000 calls per 10 seconds. What jital is highlighting that the per-player rate should be no more than a few times a minute. A server can call at a higher rate, as it is calling for a lot of users, potentially. If you need a higher limit than 1,000 per 10 seconds, you\u0026rsquo;ll want to talk to our sales team about getting on an Enterprise contract so that we can work with you on custom limits. There\u0026rsquo;s an option on the Contact Us form on the main site to message them, if you want to go that route.\n つまり、普通に PlayFab を利用している限りはプランをアップグレードしようと制限に引っかかるということが分かりました。 また、今年 1月に投稿された内容 を見るに 10秒以内に 5000以上のユーザーがログイン/登録できたとあり、もう API の 10秒間に 1000回呼び出し制限は撤廃されたのかを聞いているユーザがいたのですが、まだ撤廃されていないと返信されていたので偶然だったようでした。\nちなみに私も上記が気になったので、セッションごとにレートリミットのかかり方が変わるのか検証するために異なるユーザ情報を用いてリクエスト 2000件を並列に実行してみましたが、503 エラーは変わらず返却され続けていたので、少なくとも私の手元の環境では効果はなさそうでした。\n No, the rate limits on the Client and Server API calls has not changed. However, the rate limits are currently enforced on a per-server basis. And since the service runs a great many servers for load balancing, it is possible to exceed those limits from time to time.\n 原因の調査中 PlayFab は EC2 の us-west-2 リージョンでリクエストを受けていそうなことが分かったのですが、そのアクセス先のインスタンスがロードバランサによって分散されているため、レートリミットの制限がインスタンス先により、時と場合によって制限されるかどうかが決まってくるのかもしれないとのことでした。\n以上のことから、PlayFab の CloudFunction については Azure Function や AWS Lambda のような FaaS のような用途には使わず、あくまでもアプリケーションで補助的に利用するための独自スクリプトを動かす程度に留めて利用するのが正解なように感じました。\nPlayFab のユーザ認証情報である SessionTicket や EntityToken を利用することで、認証周りの実装部分を省くことが出来るかも知れないと思い期待していたのですが、それは別の BaaS を使うか IaaS で自前で作るのが良さそうでした。\nおわりに API の 10秒間に 1000回呼び出し制限については明示的にドキュメントに記載があるわけでもなかったため、気づくことが出来ずプロジェクト終盤で気づくという事故が起きてしまったのですが、私と似たような境遇に陥る人が少しでも減るようにと記事を書いてみました。\nとはいえ、少し調べれば出てくるような制限だったので純粋に調査不足だったなあと反省しました。。CloudFunction はとても便利ですが、利用する際は API の呼び出し制限等用法には十分お気をつけてご利用くださいませ。\nPlayFab が便利な BaaS であることに疑いの余地は無いので今後も利用すると思いますが、知見を貯めつつ効果的に使えるよう勉強していきたいと考えております。また何か知見を得たら随時ブログ記事に書き溜めていきたいと思います。\n参考リンク  Azure 関数を使用した PlayFab CloudScript - PlayFab | Microsoft Docs Server-Side Cloud Script - Execute Function (PlayFab CloudScript) | Microsoft Docs Authentication - Validate Entity Token (PlayFab Authentication) | Microsoft Docs Server API limitations - Playfab Community Server API limitations - Playfab Community  ","permalink":"https://nikaera.com/archives/playfab-api-call-limitation/","summary":"はじめに PlayFab で CloudFunction を利用しているときに API 制限に引っかかってしまいました。負荷テストをした際に初めて気づいたのですが、公式ページにも言及が無かったため発覚が遅れてしまいました。そのため、PlayFab に依存していた機能を部分的に外す必要が出てきてしまい苦労しました。\n本記事では、上記のような事態に陥る方を減らすため、API 制限に気づくまでの軌跡を辿りながら、PlayFab の CloudFunction を利用する際の注意点について、記事として残しておきたいと思います。\nPlayFab の API 制限に引っかかった要因 PlayFab の CloudFunction を利用すると、PlayFab 経由で独自 Web API を実行することが可能になります。また、CloudFunction 経由で独自 Web API を実行すると、PlayFab ユーザ情報が含まれたパラメタが含まれた状態でリクエストが飛んでくるため、その情報を利用することでサーバーサイドで PlayFab の操作を行うことが出来るようになり大変便利です。\nそのため、あるプロジェクトでは PlayFab CloudFunction を Azure Function や AWS Lambda のような FaaS を使っている感じで利用しておりました。そして、その利用の仕方は誤りであったことに後々気づきます\u0026hellip;\n負荷テストを実装するフェーズで CloudFunction を大量に叩いてみる PlayFab の CloudFunction を実行するにあたり利用した PlayFab の API は Server-Side Cloud Script - Execute Function というものになります。\n同接 2000 人想定で負荷テストのシナリオを実装することが求められていたため、その通りシンプルに 2000 件同時に Server-Side Cloud Script - Execute Function を実行するシナリオを Gatling で組んでみました。すると、何回やっても数十件以上は必ずエラーが発生していることが分かりました。","title":"📔 PlayFab の API 制限に引っかかった"},{"content":"Jest でクラスの private readonly な変数を差し替えたい時に若干引っかかったのでメモっておきます。タイトルでは Jest とありますが、本記事の内容は JavaScript でモックする際の有効な手法の 1 つとして利用することが可能です。\n結論から言うと変数を差し替えたい場合は下記のような記述になります。\nconst mockValue = \u0026#34;\u0026#34;; Object.defineProperty(service, \u0026#34;privateReadOnlyValue\u0026#34;, { value: mockValue, }); ちなみに関数を差し替えたい場合は下記のような記述になります。\nObject.defineProperty(service, \u0026#34;privateSumFunction\u0026#34;, { value: jest.fn((a, b) =\u0026gt; a + b), }); 各種テストケースで使いまわしているインスタンスの private readonly な変数をモックした場合、値をリストアしたいケースも出てきました。その場合の記述としては、下記が有効でした。\n// tmpService 変数に service インスタンスを clone して利用する const tmpService = Object.create(service); Object.defineProperty(tmpService, \u0026#34;privateReadOnlyValue\u0026#34;, { value: \u0026#34;\u0026#34;, }); 参考リンク  Object.create() - JavaScript | MDN Mocking read-only properties for a class · Issue #2227 · facebook/jest  ","permalink":"https://nikaera.com/archives/jest-private-readonly-mock/","summary":"Jest でクラスの private readonly な変数を差し替えたい時に若干引っかかったのでメモっておきます。タイトルでは Jest とありますが、本記事の内容は JavaScript でモックする際の有効な手法の 1 つとして利用することが可能です。\n結論から言うと変数を差し替えたい場合は下記のような記述になります。\nconst mockValue = \u0026#34;\u0026#34;; Object.defineProperty(service, \u0026#34;privateReadOnlyValue\u0026#34;, { value: mockValue, }); ちなみに関数を差し替えたい場合は下記のような記述になります。\nObject.defineProperty(service, \u0026#34;privateSumFunction\u0026#34;, { value: jest.fn((a, b) =\u0026gt; a + b), }); 各種テストケースで使いまわしているインスタンスの private readonly な変数をモックした場合、値をリストアしたいケースも出てきました。その場合の記述としては、下記が有効でした。\n// tmpService 変数に service インスタンスを clone して利用する const tmpService = Object.create(service); Object.defineProperty(tmpService, \u0026#34;privateReadOnlyValue\u0026#34;, { value: \u0026#34;\u0026#34;, }); 参考リンク  Object.create() - JavaScript | MDN Mocking read-only properties for a class · Issue #2227 · facebook/jest  ","title":"📝 Jest で private readonly な値をモックする方法"},{"content":"はじめに いつもブログ記事に載せるキャプチャ画像の編集 \u0026amp; アップロード先として Gyazo を利用させていただいているのですが、日々使っている中で不満に感じる点もちょくちょく出てくるようになってきました。\nそのため、3 連休を用いて Rust の勉強がてら Bloggimg というウェブアプリケーションを作ってみました。ソースコードは MIT ライセンスで GitHub のリポジトリにアップしております。ちなみに最初は Gyazo for Blog という名称で開発をしていたため、本記事内のスクショには Gyazo for Blog という文字列が出てきますが、現在は Bloggimg という名称になっております。。\nBloggimg を開発したのは、ブログ記事を書く際に利用する画像のアップロードから加工、マークダウンとして利用するまでのフローを最適化したかったからです。 ブログ記事を書く際に、記事内で用いるスクショ画像の加工や、そのアップロードにすごく時間を取られてしまうなーと日頃から感じていたのでそれを解決したかったのです。✅\n開発中に得た知見等については別途技術記事として書いて残す予定です。\n考えていたこと 今回 Bloggimg の開発を行うに当たり、考えていた点は下記になります。\n 画像の編集ツールは引き続き Gyazo に用意されているものを使う  既に最高に使いやすい 👑   キャプチャ画像をアップロードする際に、自動的に特定のコレクションに紐付けるようにする  技術記事毎にコレクションを分けて管理しているため、技術記事を書いている最中にアップするキャプチャ画像は全て特定のコレクションにまとまっていて欲しい   ワークスペースのようなツールを目指し、ブログを書く時だけに使える機能を開発する  例えば、ワンクリックで画像マークダウンの記述がコピーできたり、画像のアップロードをし直しやすくするため画像削除がお手軽に出来るよう削除ボタンに即アクセス出来るようにしたり\u0026hellip;    特にアップした画像を 自動的に特定のコレクションに紐付けるようにする については本記事で紹介しているウェブアプリケーションを作成するキッカケとなった点なので外せない点でした。\n使い方 Bloggimg の使い方についてご紹介いたします。\nログインする Bloggimg を利用するためには、まず Gyazo アカウントでログインして頂く必要がございます。トップページの右上にあるログインボタンから Gyazo アカウントでログインします。\n1. トップページ右上に配置されたログインボタンから Gyazo アカウント認証を行う\n2. Gyazo アカウント認証が正常に完了したら、再度トップページを開く\n3. トップページを開いた時に Gyazo にアップした直近の画像が確認できるはずです\nログアウトする ウェブアプリケーションからログアウトするには、ログイン後にトップページ右上に表示される ログアウト ボタンをクリックすることでログアウトできます。\nログイン後にトップページ右上に表示される ログアウト ボタンをクリックしてログアウトする\n画像ファイルをアップロードする 画像は一枚でも複数枚でもアップロードすることが可能です。画像アップロードの方法としてドラッグ \u0026amp; ドロップとファイル選択ダイアログを用意しております。\n画面中央の点線枠内に画像ファイルをドラッグ \u0026amp; ドロップするか、点線枠内をクリックしてファイル選択ダイアログから選択することで画像をアップロードできる\n画像ファイルをアップロードする際に自動でコレクションを紐付ける Gyazo トップページ左端にコレクションリストが表示されているので、画像を紐づけたいコレクションを選択します。新たにコレクションを作成する場合はコレクションリスト上部にある コレクションを作成 ボタンをクリックします。\n1. コレクションリストの中から画像を紐づけたいコレクションを選択する\n2. コレクションを選択後に遷移した先の URL 末尾のコレクション ID をコピーする\n3. トップページの最上部に 2. で控えていたコレクション ID をペーストする\n上記までのステップが完了し、正しくコレクション ID が入力できていれば、次回以降のファイルアップロード時に自動で指定したコレクションに画像が紐づくようになります。\nアップロードした画像ファイルを編集する 画像ファイルのアップロード時や 画像の再読み込み ボタンをクリックすることで、最新 20 件の画像リストを画面最下部にロードされます。画像リストの各項目ではプレビュー、編集、削除、マークダウンのコピーを行うことが可能です。\n画像リストの各項目の機能概要図\nプレビュー サムネ画像をクリックすることで、Gyazo にアップした元画像をプレビューすることが可能です。サムネ画像では画像の判別がしにくい場合に詳細を確認するための機能となります。\nアップした画像の詳細を確認するためにプレビュー機能を利用する\n編集 編集は該当画像の Gyazo ページにて行えるように、タイトルをクリックすることで Gyazo ページを別タブで開きます。\n別タブで開いた Gyazo ページから画像の編集作業を行う\n削除 画像の削除は 画像の削除 ボタンをクリックすることで、削除を行うための画面に遷移します。削除しようとしている画像で間違いないか確認後、削除を行うという手順になっております。\nGyazo から選択した画像を削除する\nマークダウンのコピー マークダウンをコピー ボタンをクリックすることで、クリップボードにマークダウン形式で該当画像を表示するための記述をコピーすることができます。具体的には下記のような記述がコピーされます。\nブログを書く先がマークダウン形式での記述に対応していれば、そのままペーストするだけで画像を表示することが可能です。\n![スクリーンショット 2021-01-11 17.10.11.png](https://i.gyazo.com/a3e219b5efb8494103432b369ee99534.png) おわりに この記事を書くのにも実際に Bloggimg を用いましたが、個人的に作業効率は上がったように感じました。ブログを書くという用途に Gyazo を利用されている方のお役に立てれば幸いです。\nまた、今後は下記の機能実装を進めていく予定です。\n 画像アップ時に自動でアスペクト比を維持した状態で画像のリサイズを自動で行う機能 画像アップ時のタイトルの接頭辞が指定できるようにする機能 編集した画像が自動的にコレクションに紐づく機能  心残りな点として編集した画像をコレクションに紐付ける機能は API でできなかったため、現在手動で行う必要があります。。Gyazo の API \u0008 がコレクションの紐づけにも対応したら対応したいと考えています ✅    ","permalink":"https://nikaera.com/archives/bloggimg-first-release/","summary":"はじめに いつもブログ記事に載せるキャプチャ画像の編集 \u0026amp; アップロード先として Gyazo を利用させていただいているのですが、日々使っている中で不満に感じる点もちょくちょく出てくるようになってきました。\nそのため、3 連休を用いて Rust の勉強がてら Bloggimg というウェブアプリケーションを作ってみました。ソースコードは MIT ライセンスで GitHub のリポジトリにアップしております。ちなみに最初は Gyazo for Blog という名称で開発をしていたため、本記事内のスクショには Gyazo for Blog という文字列が出てきますが、現在は Bloggimg という名称になっております。。\nBloggimg を開発したのは、ブログ記事を書く際に利用する画像のアップロードから加工、マークダウンとして利用するまでのフローを最適化したかったからです。 ブログ記事を書く際に、記事内で用いるスクショ画像の加工や、そのアップロードにすごく時間を取られてしまうなーと日頃から感じていたのでそれを解決したかったのです。✅\n開発中に得た知見等については別途技術記事として書いて残す予定です。\n考えていたこと 今回 Bloggimg の開発を行うに当たり、考えていた点は下記になります。\n 画像の編集ツールは引き続き Gyazo に用意されているものを使う  既に最高に使いやすい 👑   キャプチャ画像をアップロードする際に、自動的に特定のコレクションに紐付けるようにする  技術記事毎にコレクションを分けて管理しているため、技術記事を書いている最中にアップするキャプチャ画像は全て特定のコレクションにまとまっていて欲しい   ワークスペースのようなツールを目指し、ブログを書く時だけに使える機能を開発する  例えば、ワンクリックで画像マークダウンの記述がコピーできたり、画像のアップロードをし直しやすくするため画像削除がお手軽に出来るよう削除ボタンに即アクセス出来るようにしたり\u0026hellip;    特にアップした画像を 自動的に特定のコレクションに紐付けるようにする については本記事で紹介しているウェブアプリケーションを作成するキッカケとなった点なので外せない点でした。\n使い方 Bloggimg の使い方についてご紹介いたします。\nログインする Bloggimg を利用するためには、まず Gyazo アカウントでログインして頂く必要がございます。トップページの右上にあるログインボタンから Gyazo アカウントでログインします。\n1. トップページ右上に配置されたログインボタンから Gyazo アカウント認証を行う","title":"📔 ブログを書く用途に特化した Gyazo のツールを開発してみた"},{"content":"コンテナをホットスタンバイさせるために EC2 でインスタンス起動して cron で ping 飛ばしていたのですが、コスト的に勿体ないなーと思っていました。しかし、「AWS Lambda 使えばいいじゃん」という指摘を受け、確かにってなったので cron で定期実行していた ping 処理を AWS Lambda + EventBridge で置き換えました。\n実は Heroku Scheduler とか使って同様のことをしていた時期もあったのですが、10分毎しか実行できない制約があったりして使い勝手が悪かったので、後々も使っていけそうな知見な気がしたのでメモがてら記事で残しておくことにしました。\nまず、AWS Console から Lambda サービスを選択して関数を新たに作成します。\n1. AWS Lambda のトップ画面から関数作成のための画面に遷移する\n2. 必要な情報を入力して Lambda の関数を作成する\n関数が作成でき次第、ping 処理を書いていきます。http リクエストを行うためのライブラリとして Node.js の標準モジュール(https) を利用します。\nLambda 関数作成直後の index.js は下記のような記述になっていると思います。\n// index.js exports.handler = async (event) =\u0026gt; { // TODO implement  const response = { statusCode: 200, body: JSON.stringify(\u0026#39;Hello from Lambda!\u0026#39;), }; return response; }; こちらを Node.js の標準モジュール(https) を利用する形で下記のように書き換えます。\n// index.js // \u0026#34;https://www.google.com/\u0026#34; に HTTP リクエストを実行する (ping) const https = require(\u0026#39;https\u0026#39;); const httpRequest = async (url) =\u0026gt; { return new Promise((resolve, reject) =\u0026gt; { const req = https.request(url, (res) =\u0026gt; { let body = \u0026#39;\u0026#39;; res.on(\u0026#39;data\u0026#39;, (chunk) =\u0026gt; { body += chunk; }); res.on(\u0026#39;end\u0026#39;, () =\u0026gt; { console.log(`response: ${body}`); resolve(body); }); }) req.on(\u0026#39;error\u0026#39;, (e) =\u0026gt; { console.error(e); reject(e); }); req.end(); }); } exports.handler = async (event) =\u0026gt; { const body = await httpRequest(\u0026#34;https://www.google.com/\u0026#34;); return { statusCode: 200, body }; }; その後、右上にある Deploy ボタンをクリックして関数にソースコードを反映します。実際に関数が意図したとおりに動作するか、Test ボタンをクリックして動作検証してみます。\n1. Test ボタンをクリックします\n2. 動作検証時のパラメーターを入力してテスト環境を作成する\n3. 2. のテスト環境で関数の動作検証を行い正常に実行できていることを確認する\n正常に関数が実行できていること確認できれば、後は定期実行可能にすれば作業完了です。定期実行するためのスケジューラには EventBridge を利用します。Add trigger ボタンから EventBridge を追加します。\n1. Add trigger ボタンからトリガー追加画面に遷移する\n2. EventBridge トリガーを追加して定期実行の設定を行う\n3. EventBridge トリガーの追加が無事に完了したことを確認する\nまた 2. では 1分毎に実行するスケジュールを設定しましたが、EventBridge の書式 を用いてより複雑なスケジュール設定を行うことも可能です。\n最後に本当に定期実行されていて、関数の実行も正常に行われていそう確認します。Monitoring タブをクリックして、関数の実行状況を確認していきます。\n1. Monitoring タブをクリックする\n2. Lambda 関数が定期実行されていることを確認する\n3. Lambda 関数の実行結果が正しいことも確認する\nこれで作業完了です。お疲れさまでした。\n","permalink":"https://nikaera.com/archives/aws-lambda-cron/","summary":"コンテナをホットスタンバイさせるために EC2 でインスタンス起動して cron で ping 飛ばしていたのですが、コスト的に勿体ないなーと思っていました。しかし、「AWS Lambda 使えばいいじゃん」という指摘を受け、確かにってなったので cron で定期実行していた ping 処理を AWS Lambda + EventBridge で置き換えました。\n実は Heroku Scheduler とか使って同様のことをしていた時期もあったのですが、10分毎しか実行できない制約があったりして使い勝手が悪かったので、後々も使っていけそうな知見な気がしたのでメモがてら記事で残しておくことにしました。\nまず、AWS Console から Lambda サービスを選択して関数を新たに作成します。\n1. AWS Lambda のトップ画面から関数作成のための画面に遷移する\n2. 必要な情報を入力して Lambda の関数を作成する\n関数が作成でき次第、ping 処理を書いていきます。http リクエストを行うためのライブラリとして Node.js の標準モジュール(https) を利用します。\nLambda 関数作成直後の index.js は下記のような記述になっていると思います。\n// index.js exports.handler = async (event) =\u0026gt; { // TODO implement  const response = { statusCode: 200, body: JSON.stringify(\u0026#39;Hello from Lambda!\u0026#39;), }; return response; }; こちらを Node.","title":"📝 AWS Lambda で cron みたいに定期実行する"},{"content":"はじめに 本記事のカバー画像は Michal Jarmoluk による Pixabay からの画像です。\n今年は結果的にプライベートと仕事の両面で充実した年にできました。来年の自分が今を振り返れるように、今年始めからの記憶を引っ張り出しながら総括しました。\n今年問わず作ったものは Tech ページに、技術記事については RSS Feeds にまとめてあります。\n出来事 1月  Death Stranding のプラチナ獲得 弊社に面接にいらっしゃったベテラン開発者の方に何でうちに応募してくださったのか聞いたら、僕の Twitter や Qiita アカウントを見てくださり技術力がありそうと判断してくれたからと聞いて爆嬉しかった ambr オフ会参加 (オフィシャルなオフ会に初参加) Quest 用アプリケーションの初リリース体験実績解除  申請時の知見の一部については Qiita 記事 として投下   Android で AR アプリケーションの開発及び、マルチプレイを可能にするバックエンド開発を担当した  2月  Docker で各種モバイル VR 向けの Unity ビルドが出来るようにした フルリモートでアジャイルな開発チームにジョインする (WebView/ReactNative/iOS/Android)  主は ReactNative の iOS/Android のネイティブプラグイン開発 コア機能の実装にのみ注力しパフォーマンスチューニング等々を行っていたためポジション的にはひたすら地味だった    3月  note デビューした  初投稿は 精神衛生を保つため Chrome で Twitter を閲覧している時にフォロワー数を非表示にする っていうやつ   お題が「Home」の web1week に参加した  参加した時に投稿した記事はこちら    4月  会社の Medium ブログ開設 したのと、いくつか記事を寄稿した  Azure Kinect DK の開発環境構築から KinectFusion のサンプルを動かすまで 最短で Magic Leap 1 の開発環境を構築する   色々工夫して iPhone TrueDepth を WebRTC でブラウザに転送して、Three.js で表示する仕組みを実現した  Twitter でシェア してみたら、予想だにしないことに一方的に尊敬していたエンジニアの方々からいいねを貰えてモチベが爆上がりした   CloudFormation と和解。IaC の利便性を完全に理解し始める 今更 SEKIRO にハマりまくる \u0026amp; プラチナトロフィー獲得 デス・ストランディングから学んだこと が現在の自分の考え方の基礎として根付き始める  全ての考え方を 0 or 1 ではなく、グラデーションにハメ込むことが出来るようになった    5月  再びお題が「Like」の web1week に参加した  参加した時に投稿した記事はこちら (あとから確認したら投稿先を間違えていた\u0026hellip;)   Medium に目次が無いことに不満をいただき Chrome プラグインを作成する  プラグインの紹介記事 まで書いてたけど全くインストール数伸びなかった、、けど今みたら 12人ほど使ってくれている人いるぽくて嬉しい   お題が「密」の unity1week に 参戦した  6月  S3 + EventBridge + CloudWatch + CloudFront + MediaLive + MediaPackage + AppSync + Amplify + DynamoDB + Cognito + Lambda + API Gateway + SSM という AWS ガッツリなインフラ構築から、バックエンド開発及び iOS アプリ開発までをおもむろに始めた  まず DynamoDB の仕様にハマる (自分のリサーチ \u0026amp; 勉強不足によるせい\u0026hellip;) つぎに MediaPackage + CloudFront の構築 に苦戦する そしてデバッグが辛くなり Serverless Framework でエラーを検知して Webhook で Slack に通知を飛ばす方法 を実践し始めたりしていた   シェンムー3 のプレイを開始。ワクワクするし美しすぎる町並みに興奮し、しばらくの間深夜までプレイする日々が続く 映画の HELLO WORLD を見て、劇中 3回号泣する  元々は Unity で作られたシーンがあるという記事 を見て興味を持ち見ようと思い立った感じだった    7月  ひたすらトラブルバスターしてた (一番忙しかった気がする)  8月  Ghost of Tsushima にハマりまくる \u0026amp; プラチナトロフィー獲得 DDD 開発の際、DI コンテナ入れたいよねっていう話から TypeScript 環境で利用可能なライブラリを調査して InversifyJS と tsyringe を見つける  最初 InversifyJS を発見してそれで開発をしていたものの、microsoft 製の tsyringe を発見し、「メンテナが大手だしコンストラクタインジェクションだけしか使わないし、こっちのが良くね？」という話になり InversifyJS から tsyringe へのリライト作業を行う\u0026hellip;w   AWS SDK for Go で関数の引数と返り値を Type で定義するっていう考え方は非常に参考になった  引数が *Input という定義で、返り値が *Output という定義で分かりやすく読みやすい   自作 iOS ライブラリの CocoaPods 対応について C++ 周りの linker error に対する解決のためのアドバイスを急ぎ求められたので、共有された情報から自分がハマった経験に照らし合わせてソレっぽい対策案を共有したらガチッとハマって解決でき、経験が生きた感がめっちゃあって、めちゃくちゃ嬉しかった  9月  フライパンでコーヒーの焙煎を始める  チャフの飛散に苦しめられるが、風呂場で作業することで諸々ストレスフリーになる このときはまだ、後ほど焙煎機を購入することになるとは夢にも思わなかったのである\u0026hellip;   Azure を用いた開発に本格的に携わり始める  その際得た知見は Zenn で 本としてまとめた。本来は記事として書くつもりだったが、分量が増えすぎたため記事内容を分割して、本としてまとめた PlayFab CloudFunctions のための関数実装のために Azure でシステム構築していたため、PlayFab にもそれなりに詳しくなる   とある案件から別案件に移る際に、 「えー、〇〇 に行っちゃうんですか。nikaera さんは今後も 〇〇 を一緒にやっていって欲しいのに」 って結構強めに言われたことが未だにめちゃくちゃ嬉しい シンガポール現地のフリーランスの方と仕事を共同で進めることになる。技術に関する事柄やプライベートに関する事柄のやり取り等々、全て英語でコミュニケーションを行わざるを得なくなり、そのおかげで英語でコミュニケーションを取ることに一切抵抗が無くなる  10月  約 10 年ぶりに私用携帯を HTC EVO から iPhone 12 mini に機種変する  開発用途でなく普段生活で使うことのみを考慮するということであれば iPhone 12 mini は最強にオススメできるスマホです 会社支給のスマホで 7年近くを賄っていたため、特に不便がなかったため\u0026hellip;   AWS Amplify への PR がマージされる  もとは serverless-amplify-simulator の Issue で議論していたのだが、改修すべき内容は amplify-cli にあったのでそちらで PR を提出した 細かくづまづいた点を進捗共有兼ねて Issue で一人投稿しまくっておくと、他の開発者の役にも立てるし自然とその問題に詳しくなっていくし、OSS 活動への取っ掛かりとしては最高なんじゃないかと勝手に思い始める   NPM に初自作ライブラリを公開する  serverless-amplify-auth という Amplify 開発を行う際は必ず行うであろう IAM Policy の制限を Serverless で行うことが出来るようにするやつ    11月  Hugo で自分のブログ(nikaera.com)を GitHub Pages 上に構築する カジュアル面談した人に Qiita のネタ記事 見ましたって言われて嬉しいよりも恥ずかしいが上回った Etsy でアクセサリ販売している方に日本のフリマ事情を詳細にお伝えしたらおまけのプレゼントを送付してくださった  ちなみに購入物は Death Stranding の ドリームキャッチャー   Moonlander が自宅に届きテンション上がって紹介記事を書く  12月  今年学んだ重要なことを 記事 として残しといた (これもある意味総括な気がする) GitHub Profile を充実させる  こんな感じ -\u0026gt; https://github.com/nikaera 更に GitHub Profile を充実させるために Zenn のバッジを作成するサービス を作った   Lapras の技術力スコアが 3.36 になってた  基準とか良く分からないけど純粋に上位 13% に入ったと言われてるのは嬉しかった   いくつか空いてたアドベントカレンダーに参戦した  MediaPackage 用の CloudFront ディストリビューションを AWS SDK で作成する Serverless のプラグインを TypeScript で作成する方法   AWS Lambda を用いた他社製品との連携システムが好評で、去年から今年末まで特に目立った不具合等も起きずに運用できたため、次期開発に繋がりそうとの連絡があり開発者として爆喜ぶ  おわりに 今年は後半からすごい勢いでギアが入ってきた感があり、諸々活動するための足がかりを作れた気がします。身も心も進化したなと思えて成長できたなという充足感は割と高めな 1年だったので、この勢いのまま 2021 年もマイペースに色んなことにチャレンジしていければなーと思っております。\nこの記事を書いている人物のプロフィールは Profile からご確認いただけます。何かございましたら Contact からお気軽にご連絡くださいませ。\nそれではみなさま良いお年を！！😆\n","permalink":"https://nikaera.com/archives/summarize-2020/","summary":"はじめに 本記事のカバー画像は Michal Jarmoluk による Pixabay からの画像です。\n今年は結果的にプライベートと仕事の両面で充実した年にできました。来年の自分が今を振り返れるように、今年始めからの記憶を引っ張り出しながら総括しました。\n今年問わず作ったものは Tech ページに、技術記事については RSS Feeds にまとめてあります。\n出来事 1月  Death Stranding のプラチナ獲得 弊社に面接にいらっしゃったベテラン開発者の方に何でうちに応募してくださったのか聞いたら、僕の Twitter や Qiita アカウントを見てくださり技術力がありそうと判断してくれたからと聞いて爆嬉しかった ambr オフ会参加 (オフィシャルなオフ会に初参加) Quest 用アプリケーションの初リリース体験実績解除  申請時の知見の一部については Qiita 記事 として投下   Android で AR アプリケーションの開発及び、マルチプレイを可能にするバックエンド開発を担当した  2月  Docker で各種モバイル VR 向けの Unity ビルドが出来るようにした フルリモートでアジャイルな開発チームにジョインする (WebView/ReactNative/iOS/Android)  主は ReactNative の iOS/Android のネイティブプラグイン開発 コア機能の実装にのみ注力しパフォーマンスチューニング等々を行っていたためポジション的にはひたすら地味だった    3月  note デビューした  初投稿は 精神衛生を保つため Chrome で Twitter を閲覧している時にフォロワー数を非表示にする っていうやつ   お題が「Home」の web1week に参加した  参加した時に投稿した記事はこちら    4月  会社の Medium ブログ開設 したのと、いくつか記事を寄稿した  Azure Kinect DK の開発環境構築から KinectFusion のサンプルを動かすまで 最短で Magic Leap 1 の開発環境を構築する   色々工夫して iPhone TrueDepth を WebRTC でブラウザに転送して、Three.","title":"📔 2020年の振り返り"},{"content":"Zenn.badge を作成する時に React に highlight.js を組み込もうとしたのですが、若干躓いてしまったので対処法についてメモっておきます。\nReact は既にプロジェクトにインストール済みと仮定します。\n# 一応 React をインストールするためのコマンドは ↓ npm i --save react react-dom まずは highlight.js を NPM or Yarn でインストールします。\n# NPM で highlight.js をインストールする npm i --save highlight.js yarn add highlight.js その後、React ソースコードに highlight.js を組み込みます。 ソースコードの全体像は下記のとおりです。\nimport Head from \u0026#39;next/head\u0026#39; import styles from \u0026#39;../styles/Home.module.css\u0026#39; import React, { useState, useEffect } from \u0026#39;react\u0026#39;; /** highlight.js を import する */ import hljs from \u0026#39;highlight.js/lib/core\u0026#39;; /** シンタックスハイライトしたい言語のみ import として登録する 今回は html をハイライトしたかったので xml を import した デザインは highlight.js/styles/~ を変更することで調整可能 https://highlightjs.org/ のトップページから各種デザインについては確認可能 (コード右下にある style の右側リンククリックで各種デザインのプレビューが可能) */ import xml from \u0026#39;highlight.js/lib/languages/xml\u0026#39;; import \u0026#39;highlight.js/styles/github.css\u0026#39;; hljs.registerLanguage(\u0026#39;xml\u0026#39;, xml); let inputChecker = null; export default function Home() { const [user, setUser] = useState(\u0026#39;nikaera\u0026#39;); const [previewUser, setPreviewUser] = useState(\u0026#39;nikaera\u0026#39;); const [badgeCode, setBadgeCode] = useState(\u0026#39;nikaera\u0026#39;); const [style, setStyle] = useState(\u0026#39;plastic\u0026#39;) /** useEffect のタイミングで hightlight.js の初期化を行う。 called プロパティを false にすることで highlight.js で、 コードが変更された場合でも常にシンタックスハイライトすることが可能 */ useEffect(() =\u0026gt; { hljs.initHighlighting(); hljs.initHighlighting.called = false; }); useEffect(() =\u0026gt; { /** シンタックスハイライトしたいコード input フォームへの入力内容に応じて動的に変わる */ setBadgeCode(` \u0026lt;!-- Like のバッジ --\u0026gt; \u0026lt;a href=\u0026#34;https://zenn.dev/${user}\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;https://zenn-badge.herokuapp.com/s/${user}/likes?style=${style}\u0026#34; alt=\u0026#34;${user}likes\u0026#34; /\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;!-- Articles のバッジ --\u0026gt; \u0026lt;a href=\u0026#34;https://zenn.dev/${user}/articles\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;https://zenn-badge.herokuapp.com/s/${user}/articles?style=${style}\u0026#34; alt=\u0026#34;${user}articles\u0026#34; /\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;!-- Followers のバッジ --\u0026gt; \u0026lt;a href=\u0026#34;https://zenn.dev/${user}/followers\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;https://zenn-badge.herokuapp.com/s/${user}/followers?style=${style}\u0026#34; alt=\u0026#34;${user}followers\u0026#34; /\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;!-- Books のバッジ --\u0026gt; \u0026lt;a href=\u0026#34;https://zenn.dev/${user}/books\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;https://zenn-badge.herokuapp.com/s/${user}/books?style=${style}\u0026#34; alt=\u0026#34;${user}books\u0026#34; /\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;!-- Scraps のバッジ --\u0026gt; \u0026lt;a href=\u0026#34;https://zenn.dev/${user}/scraps\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;https://zenn-badge.herokuapp.com/s/${user}/scraps?style=${style}\u0026#34; alt=\u0026#34;${user}scraps\u0026#34; /\u0026gt; \u0026lt;/a\u0026gt;`); }, [user, style]); const handleChange = (event) =\u0026gt; { if (inputChecker) clearTimeout(inputChecker); inputChecker = setTimeout(() =\u0026gt; { clearTimeout(inputChecker); inputChecker = null; setPreviewUser(event.target.value); }, 1 * 1000); // 1 seconds  setUser(event.target.value); }; const handleSelect = (event) =\u0026gt; { setStyle(event.target.value); } return ( \u0026lt;div className={styles.container}\u0026gt; \u0026lt;Head\u0026gt; \u0026lt;title\u0026gt;Zenn.badge\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;icon\u0026#34; href=\u0026#34;zenn.svg\u0026#34; type=\u0026#34;image/svg+xml\u0026#34; /\u0026gt; \u0026lt;meta name=\u0026#34;description\u0026#34; content=\u0026#34;GitHub Profile に載せるための Zenn の各種スコアバッジを作成するためのウェブサービス\u0026#34; /\u0026gt; \u0026lt;meta name=\u0026#34;keywords\u0026#34; content=\u0026#34;Zenn, GitHub, GitHub Profile, Shields.io\u0026#34; /\u0026gt; \u0026lt;meta name=\u0026#34;author\u0026#34; content=\u0026#34;nikaera\u0026#34; /\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34; /\u0026gt; \u0026lt;meta property=\u0026#34;og:url\u0026#34; content=\u0026#34;https://zenn-badge.vercel.app/\u0026#34; /\u0026gt; \u0026lt;meta property=\u0026#34;og:type\u0026#34; content=\u0026#34;website\u0026#34; /\u0026gt; \u0026lt;meta property=\u0026#34;og:title\u0026#34; content=\u0026#34;Zenn.badge\u0026#34; /\u0026gt; \u0026lt;meta property=\u0026#34;og:description\u0026#34; content=\u0026#34;GitHub Profile に載せるための Zenn の各種スコアバッジを作成するためのウェブサービス\u0026#34; /\u0026gt; \u0026lt;meta property=\u0026#34;og:site_name\u0026#34; content=\u0026#34;Zenn.badge\u0026#34; /\u0026gt; \u0026lt;meta property=\u0026#34;og:image\u0026#34; content=\u0026#34;https://zenn-badge.vercel.app/ogp_image.png\u0026#34; /\u0026gt; \u0026lt;/Head\u0026gt; \u0026lt;main className={styles.main}\u0026gt; \u0026lt;h1 className={styles.title}\u0026gt; Welcome to \u0026lt;a href=\u0026#34;https://zenn-badge.nikaera.vercel.app/\u0026#34;\u0026gt;Zenn.badge!\u0026lt;/a\u0026gt; \u0026lt;/h1\u0026gt; \u0026lt;p className={styles.description}\u0026gt; \u0026lt;a href=\u0026#34;https://zenn.dev/\u0026#34; target=\u0026#34;_blank\u0026#34; rel=\u0026#34;noopener noreferrer\u0026#34;\u0026gt;Zenn\u0026lt;/a\u0026gt; のスコアを GitHub 風のバッジに変換するサービスです。 \u0026lt;/p\u0026gt; \u0026lt;div\u0026gt; \u0026lt;h3\u0026gt;注意事項 \u0026amp;rarr;\u0026lt;/h3\u0026gt; \u0026lt;p\u0026gt;下記の事項にご留意ください。\u0026lt;/p\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;12時間ほどデータがキャッシュされます\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;100%の動作を保証するものではありません\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;APIの利用数制限などにより、表示されない事があります\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;GitHub Profile にご利用ください\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;h3\u0026gt;アカウント名を入力してください \u0026amp;rarr;\u0026lt;/h3\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; value={user} onChange={handleChange} /\u0026gt; \u0026lt;select name=\u0026#34;style\u0026#34; value={style} onChange={handleSelect}\u0026gt; \u0026lt;option value=\u0026#34;plastic\u0026#34;\u0026gt;plastic\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;flat\u0026#34;\u0026gt;flat\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;flat-square\u0026#34;\u0026gt;flat-square\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;for-the-badge\u0026#34;\u0026gt;for-the-badge\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;social\u0026#34;\u0026gt;social\u0026lt;/option\u0026gt; \u0026lt;/select\u0026gt; { /* pre -\u0026gt; code タグ内に highlight.js で シンタックスハイライトしたい内容を出力する */ } \u0026lt;pre style={{ width: \u0026#39;80vw\u0026#39; }}\u0026gt; \u0026lt;code className=\u0026#34;xml\u0026#34;\u0026gt; {badgeCode} \u0026lt;/code\u0026gt; \u0026lt;/pre\u0026gt; \u0026lt;h3\u0026gt;プレビュー \u0026amp;rarr;\u0026lt;/h3\u0026gt; \u0026lt;h4\u0026gt;Likes 👍\u0026lt;/h4\u0026gt; \u0026lt;a href={`https://zenn.dev/${previewUser}`}\u0026gt; \u0026lt;img src={`https://zenn-badge.herokuapp.com/s/${previewUser}/likes?style=${style}`} alt={`${previewUser}likes`} /\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;h4\u0026gt;Articles 📝\u0026lt;/h4\u0026gt; \u0026lt;a href={`https://zenn.dev/${previewUser}/articles`}\u0026gt; \u0026lt;img src={`https://zenn-badge.herokuapp.com/s/${previewUser}/articles?style=${style}`} alt={`${previewUser}articles`} /\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;h4\u0026gt;Followers 👱\u0026lt;/h4\u0026gt; \u0026lt;a href={`https://zenn.dev/${previewUser}/followers`}\u0026gt; \u0026lt;img src={`https://zenn-badge.herokuapp.com/s/${previewUser}/followers?style=${style}`} alt={`${previewUser}followers`} /\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;h4\u0026gt;Books 📚\u0026lt;/h4\u0026gt; \u0026lt;a href={`https://zenn.dev/${previewUser}/books`}\u0026gt; \u0026lt;img src={`https://zenn-badge.herokuapp.com/s/${previewUser}/books?style=${style}`} alt={`${previewUser}books`} /\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;h4\u0026gt;Scraps 🗑️\u0026lt;/h4\u0026gt; \u0026lt;a href={`https://zenn.dev/${previewUser}/scraps`}\u0026gt; \u0026lt;img src={`https://zenn-badge.herokuapp.com/s/${previewUser}/scraps?style=${style}`} alt={`${previewUser}scraps`} /\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;h3\u0026gt;問い合わせ \u0026amp;rarr;\u0026lt;/h3\u0026gt; \u0026lt;div\u0026gt; 下記 GitHub の Issue で \u0026lt;a className={styles.link} href=\u0026#34;https://github.com/nikaera\u0026#34;\u0026gt;nikaera\u0026lt;/a\u0026gt; にメンションを付けてご連絡ください。 \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a className={styles.link} href=\u0026#34;https://github.com/nikaera/zenn-badge\u0026#34;\u0026gt;Zenn.badge\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/main\u0026gt; \u0026lt;footer className={styles.footer}\u0026gt; 制作者:\u0026amp;nbsp;\u0026lt;a className={styles.link} href=\u0026#34;https://zenn.dev/nikaera\u0026#34; target=\u0026#34;_blank\u0026#34; rel=\u0026#34;noopener noreferrer\u0026#34;\u0026gt;nikaera\u0026lt;/a\u0026gt; \u0026lt;/footer\u0026gt; \u0026lt;/div\u0026gt; ) } ","permalink":"https://nikaera.com/archives/react-highlightjs/","summary":"Zenn.badge を作成する時に React に highlight.js を組み込もうとしたのですが、若干躓いてしまったので対処法についてメモっておきます。\nReact は既にプロジェクトにインストール済みと仮定します。\n# 一応 React をインストールするためのコマンドは ↓ npm i --save react react-dom まずは highlight.js を NPM or Yarn でインストールします。\n# NPM で highlight.js をインストールする npm i --save highlight.js yarn add highlight.js その後、React ソースコードに highlight.js を組み込みます。 ソースコードの全体像は下記のとおりです。\nimport Head from \u0026#39;next/head\u0026#39; import styles from \u0026#39;../styles/Home.module.css\u0026#39; import React, { useState, useEffect } from \u0026#39;react\u0026#39;; /** highlight.js を import する */ import hljs from \u0026#39;highlight.js/lib/core\u0026#39;; /** シンタックスハイライトしたい言語のみ import として登録する 今回は html をハイライトしたかったので xml を import した デザインは highlight.","title":"📝 React で highlight.js を適用する方法"},{"content":"Hugo で設定した外部リンクを開くときは別ウィンドウで開けるようにしたかったので、Hugo のテーマファイルをオーバーライドして対応しました。外部リンクが設定されているときのみ a タグに target=\u0026quot;_blank\u0026quot; rel=\u0026quot;noopener noreferrer\u0026quot; が追加されるようにしました。\nテンプレートファイルは GO の HTML テンプレートで書かれているので、その書式にしたがって a タグの属性を書き換えることで、外部リンクの場合は target=\u0026quot;_blank\u0026quot; rel=\u0026quot;noopener noreferrer\u0026quot; を追加します。\n下記は hugo-PaperMod で、メインメニューの a タグに target=\u0026quot;_blank\u0026quot; rel=\u0026quot;noopener noreferrer\u0026quot; を追加するときのサンプルになります。\n\u0026lt;ul class=\u0026#34;menu\u0026#34; id=\u0026#34;menu\u0026#34; onscroll=\u0026#34;menu_on_scroll()\u0026#34;\u0026gt; \u0026lt;!-- `.Site.Menues.main` の要素数 (メニュー数) ループします --\u0026gt; {{- range .Site.Menus.main }} \u0026lt;!-- 要素内の .URL にアクセスすることで設定されているリンクにアクセスする。 設定されている URL のプレフィクスが https:// or http:// であれば、 絶対リンクが設定されているはずなため、外部リンクが設定されているとみなす。 --\u0026gt; {{- $is_abs_url := or (strings.HasPrefix .URL \u0026#34;https://\u0026#34;) (strings.HasPrefix .URL \u0026#34;http://\u0026#34;) }} \u0026lt;!-- もし外部リンクが設定されていれば、そのまま .URL の内容を出力する。 そうでなければ、内部リンクを language プレフィクスを付与した形で出力する。 --\u0026gt; {{- $menu_item_url := (cond $is_abs_url .URL (printf \u0026#34;%s/\u0026#34; .URL) ) | absLangURL }} \u0026lt;li\u0026gt; \u0026lt;!-- 外部リンクが設定されていたら ($is_abs_url が true なら) a タグに target=\u0026#34;_blank\u0026#34; rel=\u0026#34;noopener noreferrer\u0026#34; を設定する --\u0026gt; \u0026lt;a href=\u0026#34;{{ $menu_item_url }}\u0026#34; {{- if $is_abs_url }} target=\u0026#34;_blank\u0026#34; rel=\u0026#34;noopener noreferrer\u0026#34; {{- end}}\u0026gt; \u0026lt;span {{- if eq $menu_item_url $page_url }} class=\u0026#34;active\u0026#34; {{- end }}\u0026gt; {{ .Name }} \u0026lt;/span\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; {{- end -}} \u0026lt;/ul\u0026gt; ","permalink":"https://nikaera.com/archives/hugo-open-external-link-in-a-new-window/","summary":"Hugo で設定した外部リンクを開くときは別ウィンドウで開けるようにしたかったので、Hugo のテーマファイルをオーバーライドして対応しました。外部リンクが設定されているときのみ a タグに target=\u0026quot;_blank\u0026quot; rel=\u0026quot;noopener noreferrer\u0026quot; が追加されるようにしました。\nテンプレートファイルは GO の HTML テンプレートで書かれているので、その書式にしたがって a タグの属性を書き換えることで、外部リンクの場合は target=\u0026quot;_blank\u0026quot; rel=\u0026quot;noopener noreferrer\u0026quot; を追加します。\n下記は hugo-PaperMod で、メインメニューの a タグに target=\u0026quot;_blank\u0026quot; rel=\u0026quot;noopener noreferrer\u0026quot; を追加するときのサンプルになります。\n\u0026lt;ul class=\u0026#34;menu\u0026#34; id=\u0026#34;menu\u0026#34; onscroll=\u0026#34;menu_on_scroll()\u0026#34;\u0026gt; \u0026lt;!-- `.Site.Menues.main` の要素数 (メニュー数) ループします --\u0026gt; {{- range .Site.Menus.main }} \u0026lt;!-- 要素内の .URL にアクセスすることで設定されているリンクにアクセスする。 設定されている URL のプレフィクスが https:// or http:// であれば、 絶対リンクが設定されているはずなため、外部リンクが設定されているとみなす。 --\u0026gt; {{- $is_abs_url := or (strings.HasPrefix .URL \u0026#34;https://\u0026#34;) (strings.HasPrefix .URL \u0026#34;http://\u0026#34;) }} \u0026lt;!-- もし外部リンクが設定されていれば、そのまま .URL の内容を出力する。 そうでなければ、内部リンクを language プレフィクスを付与した形で出力する。 --\u0026gt; {{- $menu_item_url := (cond $is_abs_url .","title":"📝 Hugo で外部リンクを target=\"_blank\" で開く方法"},{"content":"はじめに 最近 ErgoDox EZ からの乗り換えで Moonlander というエルゴノミクスキーボードを使っているのですが、諸々非常に満足しています。コンパクトながら安定感のある打ち心地でカスタマイズ性も高く、試行錯誤しながら自分好みにセットアップして使い勝手を最適化することができます。\nバックライトがあり、デフォで 様々な光り方 が用意されているのも非常にカッコよいです。あまりキーボードのバックライトを気にしたことは今まで無かったのですが、何となく 1日毎にエフェクトを切り替えると良い気分転換になります。なんとなくだけど。。ｗ\nまた、これについてはエルゴノミクスキーボード全般に言える話で Moonlander に限った話では無い気がしますが、体がこわばった姿勢にならなくなり、肩が開いてリラックスした姿勢でタイピングできます。\nそのため、長時間 PC で作業していても、呼吸が浅くなりづらく、肩への負担も少なく感じます。現に筆者はキーボードを変えただけで生活習慣変えた覚えがないにも関わらず、長時間作業しても疲れにくくなりましたし、肩こりになりにくくなりました。\n毎年冬になると肩こりになる体質だったのですが、ErgoDox EZ を採用し始めてから肩こりに悩まされることは無くなりました。\n今回はそんな気に入って仕事プライベート問わず酷使している Moonlander についての紹介記事を書いていこうと思います。\nちなみに筆者はキーコンフィグを軽くカスタマイズしている程度のライトユーザーです。\nセットアップが簡単 Web から簡単にキーコンフィグを設定することが可能です。キーコンフィグ設定のためのサービスは Ergodox EZ Configurator というやつです。名前に Ergodox がついていますが ZSA Technology Labs から購入可能なキーボード全てに対応しています。(Moonlander にも Planck にも対応)\n今回は Moonlander Mark I を利用する\nSearch layouts ボタンをクリックすることで、他の人が既にカスタマイズしたキーコンフィグをダウンロードしたり、そのキーコンフィグを元に自分用のキーコンフィグをカスタマイズすることも可能です。\nちなみにデフォルトのキーコンフィグは Configure ボタンをクリックすると確認することができます。もちろん、そこからキーコンフィグをカスタマイズしていくことも可能です。\nまた、カスタマイズした設定内容は常に Ergodoz EZ Configurator に保存されるので、後から細かくキーコンフィグを修正していくといったことも可能です。 最初のうちは頻繁にキーコンフィグに微修正入れると思うので、めっちゃ便利でした。\nErgodoz EZ Configurator の Search layouts で \u0026ldquo;coding\u0026rdquo; で検索した結果\nちなみに僕が使用しているキーコンフィグは こちら です。他の方々のキーコンフィグと比べると大分シンプルですが、その分初見の方でも扱いやすいコンフィグだと思います多分\u0026hellip;\nキーコンフィグの更新も簡単 キーコンフィグの設定が完了したら Wally というツールを使ってキーコンフィグ設定を実際にキーボードに反映させることが可能です。\n余談ですが、Wally は Go言語で作成されていて GitHub でソースコードが公開されています。\nWally のトップページからツールをダウンロードする\nWally アプリを起動したら、Moonlander を接続していれば認識されている様子が確認できるはずなので、 Ergodox EZ Configurator で生成してダウンロードした bin ファイルを Wally アプリウインドウ上にドラッグ \u0026amp; ドロップします。\nWally を起動してダウンロードした bin ファイルをドラッグ \u0026amp; ドロップする\nその後、リセットボタンの入力を求められるのでキーボード左上の小さな穴内部にあるボタンをクリックするか、アプリ右下の Reset をクリックします。これだけでキーコンフィグを反映させることが可能です。\nちなみにリセットボタンはキーコンフィグで特定のキーに割り当てることも可能です。\nデュアルファンクションキーが便利 例えば Shift や Ctrl キー等について、特定キーを長押しすることで発火させることが出来るような機能です。これはシンプルなのですが、個人的に非常に強力で一度慣れると普通のキーボードにも設定したくなるレベルでした。\nF キーのデュアルファンクションキーの設定内容\n例えば A キーもしくは；キーを長押しすると Shift キーの振る舞いになるよう設定していると、プログラミングしている最中キャメルケースで変数を書く時に、ホームポジションから、一切指を動かさずに楽に英語を大文字入力することが可能です。\nまた L キーもしくは S キーを長押しすると Win/CMD キーが発動する様にしているのですが、そのおかげで Windows では作業中、特定アプリを起動したい時に L キー長押しで出てきた Win メニューから文字列検索でサクッと特定アプリを起動することが出来ます。この間も指は一切動かさずに済みます。\nデュアルファンクションキーは Ergodox EZ Configurator で Modify layout 中に、該当キーをクリックして出てくる、Keys タブから行うことが可能です。\nデュアルファンクションキーの設定方法\n上記のおかげでマウスに触る頻度も低くなり、結果としてキーボードで色々な操作をやり繰りしていると PC での作業効率が非常に上がりました。\nレイヤーを用いることでキータイプの効率を向上させる Moonlander にはレイヤーという概念があり、各種キーの動作をマルっと差し替えることが可能です。例えば レイヤー1 には通常通りの英字入力を割り当てておき、レイヤー2 には特殊文字や記号入力を普段打ちやすい位置に割り当て、レイヤー3 にはネットサーフィン用にマウス操作やブラウザ操作等を割り当てておくことが可能です。\nレイヤーの確認および設定方法\nこの設定を切り替える方法も様々用意されていて、例えば 特定キーを押しっぱなしにしているとレイヤーが切り替わるように出来たり、特定キーを押したらもう一度同一キーをクリックしない限り、そのレイヤーが適用され続けるといったことも可能です。\n設定を切り替えるためのキーコンフィグ (レイヤースイッチ)\nちなみに上記のレイヤー設定の例は筆者が現在利用しているキーコンフィグです。基本レイヤー1が常に使われ続ける設定で、レイヤー2 には親指周辺のキー押しっぱで切り替わるようにしております。レイヤー3 は一度特定キーを押したら反映され続けるようにしていて、ネットサーフィン用の設定を割り当てられています。\nレイヤーは最大 32個まで設定可能らしいですが、筆者はフルで設定されているキーコンフィグには未だ出会ったことがありません\u0026hellip;w\nよく聞かれる質問 エルゴノミクスキーボードを使っていると良く 「何が良いの？」「普通のキーボードが打てなくなるんじゃない？」「タイピング速度は速くなるの？」 等色々聞かれることが多いので、今回はそれらのよく聞かれる質問について自分の回答をまとめてみました。\n Q. どれくらいの期間でエルゴノミクスキーボードが実務でも使えるくらいに習熟した？\nA. 英字は最初から問題なく打てましたが、記号については慣れるまで 2-3週間くらいはかかった記憶があります。 慣れるまでは、自分の設定したキーコンフィグを何回も見返して照らし合わせながら打ってたので尋常じゃなく打つの遅かったです\u0026hellip;\n Q. いつも使ってる普通のキーボード打てなくならない？\nA. 僕は最初会社では通常キーボードで家では ErgoDox EZ で特訓していたのですが、確かに最初のうちは混乱して頭の切り替えまでに 20分くらいは要してました。ですが、大体 1ヵ月程度で勝手にキーボード触る時に頭がそのキーボード用の操作にスイッチされるようになりました。今ではどちらのキーボードでも全く問題なく打ててます。 キーコンフィグを常にライトにしているせいもあるかもしれません。\n Q. キーコンフィグはデフォルトのままでも大丈夫？\nA. デフォだと英字配列になっているのと、一部キーが特殊な振る舞いをするように設定されているので、最初にそこら辺のキーを整理しないと普段使いにはキツいと思います。そのため、無理にデフォ設定を使用するよりも、キーボードが届いたら真っ先に自分用のキーコンフィグを行うことをオススメします。 ちなみに最初のうちはキーコンフィグの設定にめちゃくちゃハマって色々細かくチューニングしまくって時間溶けまくってたのですが、筆者は最終的にシンプルな設定に落ち着きました。\n Q. 肩こり解消にもなるって本当？\nA. 僕は肩こり改善しました。運動は普段一切しないし、通常キーボードで日常業務していた時は常に PC と向かい合っていて慢性的に肩が緊張状態で肩こり気味だったのですが、分割キーボードにしてからは肩こりになったことは通年でほぼありません。\n Q. タイピング速度は速くなる？\nA. タイピング速度が早くなったかは分かりませんが、打ち間違いは減りました。 手が小さいのも関係しているかもしれませんが、基本ホームポジション中心にキーを配置して、配置しきれないキーはレイヤー分けしてホームポジション中心に配置しているので指の動きが常に小さくなったのが関係しているのかもしれません。\nおわりに 最初購入して届いたときは不安でしたが、真っ先にキーコンフィグを普段使っているキーボードと同等にしてから、徐々に自分用のキーコンフィグにカスタマイズしつつ、寿司打 等でキータイプ練習および実際のプログラミングで記号入力の練習をしていれば、大体 1-2週間くらいで実践投入可能になると思います。\n一旦慣れてしまえばタイピングしていても、体がこわばった姿勢にならなくなるので疲れにくくなりますし、肩も開いてリラックスした姿勢でタイピングできるので呼吸もしやすくて、肩への負担も少なく感じます。\nキーボードが分割されているので、恐らくブラインドタッチも身につくと思います。というより身につけざるを得ない\u0026hellip;？？\nちなみに Moonlander のキーコンフィグには他にも便利なキー設定が沢山あり、Hyper キーやバックライトを変更するキーを割り当てたり、チュートリアルが起動するキーなども割り当てることなども可能です。音楽の再生切り替えたりとかも\u0026hellip;w\nこの記事を見てエルゴノミクスキーボードに、少しでもご興味持っていただいた方がいれば、最初は飛び込むのにはちょっと勇気がいるかもしれませんが、、値段もそれなりだし\u0026hellip; ｗ\nこの機会に是非 ErgoDox EZ もしくは Moonlander 等のエルゴノミクスキーボードを試してみて欲しいです！\n","permalink":"https://nikaera.com/archives/introduction-to-moonlander/","summary":"はじめに 最近 ErgoDox EZ からの乗り換えで Moonlander というエルゴノミクスキーボードを使っているのですが、諸々非常に満足しています。コンパクトながら安定感のある打ち心地でカスタマイズ性も高く、試行錯誤しながら自分好みにセットアップして使い勝手を最適化することができます。\nバックライトがあり、デフォで 様々な光り方 が用意されているのも非常にカッコよいです。あまりキーボードのバックライトを気にしたことは今まで無かったのですが、何となく 1日毎にエフェクトを切り替えると良い気分転換になります。なんとなくだけど。。ｗ\nまた、これについてはエルゴノミクスキーボード全般に言える話で Moonlander に限った話では無い気がしますが、体がこわばった姿勢にならなくなり、肩が開いてリラックスした姿勢でタイピングできます。\nそのため、長時間 PC で作業していても、呼吸が浅くなりづらく、肩への負担も少なく感じます。現に筆者はキーボードを変えただけで生活習慣変えた覚えがないにも関わらず、長時間作業しても疲れにくくなりましたし、肩こりになりにくくなりました。\n毎年冬になると肩こりになる体質だったのですが、ErgoDox EZ を採用し始めてから肩こりに悩まされることは無くなりました。\n今回はそんな気に入って仕事プライベート問わず酷使している Moonlander についての紹介記事を書いていこうと思います。\nちなみに筆者はキーコンフィグを軽くカスタマイズしている程度のライトユーザーです。\nセットアップが簡単 Web から簡単にキーコンフィグを設定することが可能です。キーコンフィグ設定のためのサービスは Ergodox EZ Configurator というやつです。名前に Ergodox がついていますが ZSA Technology Labs から購入可能なキーボード全てに対応しています。(Moonlander にも Planck にも対応)\n今回は Moonlander Mark I を利用する\nSearch layouts ボタンをクリックすることで、他の人が既にカスタマイズしたキーコンフィグをダウンロードしたり、そのキーコンフィグを元に自分用のキーコンフィグをカスタマイズすることも可能です。\nちなみにデフォルトのキーコンフィグは Configure ボタンをクリックすると確認することができます。もちろん、そこからキーコンフィグをカスタマイズしていくことも可能です。\nまた、カスタマイズした設定内容は常に Ergodoz EZ Configurator に保存されるので、後から細かくキーコンフィグを修正していくといったことも可能です。 最初のうちは頻繁にキーコンフィグに微修正入れると思うので、めっちゃ便利でした。\nErgodoz EZ Configurator の Search layouts で \u0026ldquo;coding\u0026rdquo; で検索した結果\nちなみに僕が使用しているキーコンフィグは こちら です。他の方々のキーコンフィグと比べると大分シンプルですが、その分初見の方でも扱いやすいコンフィグだと思います多分\u0026hellip;\nキーコンフィグの更新も簡単 キーコンフィグの設定が完了したら Wally というツールを使ってキーコンフィグ設定を実際にキーボードに反映させることが可能です。","title":"📔 Moonlander というエルゴノミクスキーボードのススメ"},{"content":"はじめに まず、私の誕生日は 11/6 なので本日 12/6 は誕生日からちょうど 1ヶ月後になります。\n誕生日なので何か書くことにした✍️ | なんでもに参加しました！ https://t.co/1NXySfMlak #Crieit #crieit_advent_calendar @crieitcommunityより\n\u0026mdash; 𝚗𝚒𝚔𝚊𝚎𝚛𝚊 (@n1kaera) November 2, 2020  はい。完全にノリで参加しようと投稿予約してから、後日確認して気づきました。。ｗ しかし、その間違えに気づいてから、何を投稿しようかなあと考え始めた時に、ふと「以前の自分だったら絶対ノリでアドベントカレンダーに登録するっていう行動しないよなあ」ということに気づきました。\nそこで、今回は以前の自分と比較して、今の自分がどう変わったのか考察してみることにしました。この記事書いてるときは誕生日からまだ 1週間経ってないし、ちょうど考察するには良い機会かなと思って。\n以前の自分 Photo by Luis Villasmil on Unsplash\n以前はやりたいことがあっても全部後回しにしてしまっていました。何故かと言うと仕事やプライベートも含めて、他に直近でやらなければならない、もしくはそう思いこんでいる TODO があったときに、それらが残っていると次々に心配事や考え事が増えていってしまい、やりたいことに集中出来なくなるからです。\nつまり、やりたいことは本気で集中できるタイミングが来たらやろうと考えていました。\nそのため、読もうと思って買った本を読みたい、買って届いた新作ゲームをやりたい、OSS 活動をしてみたい、ライブラリを自分で作成してみたい等々のやりたいことは全て後回しになっていました。\n何も考えないでサクッと取り組めるプレイ済みのゲームを遊んだり、気に入っている Youtube の動画を何度も繰り返し見たりして時間を浪費していました。\nボーッとしながら何も考えないで過ごす時間や遊ぶ時間は気力を養う上で重要で必要だと認識しているのですが、それだけを余暇に費やすのは少し勿体ないなと感じていました。\nそして、ある時ふと気づきました。多分このままの生活してると連休とか仕事の区切りのタイミングとかでしか、自分がやりたいことに取り組むことはできないなと。。ちなみに、私はいわゆる ON/OFF みたいな切り替えが出来ないタイプなので、「仕事が終わったらスイッチを OFF にしてプライベートを全力で楽しむようにする」とかは無理なタイプです。\nそこで、過去自分が気分がノリ続けて作業できたり、新しいことに挑戦し始めたときのことを思い返しながら、現状改善のために簡単に出来ることからやってみようと 1年前くらい前から行動を起こし始めました。\n試したこと Free-PhotosによるPixabayからの画像\nまず、前提として下記項目はあえて頑張って解決するとかは諦めました。理由は中学生くらいの時から「そうだったなあ」って感じていることだったので潔く諦めた感じです。\n 仕事プライベート関係なく、やりたくない面倒な TODO を意識してしまい無駄に疲れる  ふとした瞬間に思い出して不快になるかつ、それらの TODO は後回しにしてしまいがちなので、更に不快になる機会が増えてきて、結果疲れ続ける   やるべき必要がある TODO が増えてくると最優先で迅速に全部片付けたくなる  それらが意識の端にあると心を休めた状態で日々を過ごすことが難しくなってきて、結果疲れ続ける    上記の解決を諦めても、やりたいことが自然と出来る環境が作れるようにしようとしました。\n仕事プライベート問わず TODO の総量を減らしていく TODO が増えてくることによって、やるべき TODO も必然的に増えてきます。最初は優先度の低い TODO だったのに、作業していくうちにそこから更にやるべき他の TODO が生まれてくることもあります。\nそのため、そもそも仕事でもプライベートでも優先度とか関係なく TODO を日常的に増やさない努力を行いました。 割とお願いされたら何でも引き受けてしまいがちだったので、そこは常に意識するようにしました。\n直感的に自分に向いて無いと思ったり、自分が請け負う必要が無い TODO は極力減らすか、その内容を簡素にしてもらいました。 常に多少の余裕が感じられる範囲で TODO を抑え込むようにすることで無駄に TODO を意識して気力を消耗し続けることは少なくなっていきました。\nやりたくない TODO は疲れない範囲で対処していく もちろん、それでも 出来ればやりたくないけど、やらないといけない TODO は出てきました。\nただ、やりたくない TODO は大抵やりたくない何かを自分が勝手に想像していることも多いです。つまり、TODO の具体的な内容が明らかになっていない中で勝手にその作業内容を想像してしまい嫌になっているケースです。\nその場合は、作業内容を具体化する作業を行うことで解決できる可能性があります。やりたくないと考えていることが、実は絵空事の場合もあるからです。\n例えば、TODO を依頼してきた相手がいる場合、具体的な作業内容を文章にしてもらう、万が一それが出来ないと言われた場合は、自分が不快に感じないレベルで作業して適宜内容を報告することで、相手が方向性を正しいか間違っているかを随時指摘してくれて、次の作業の内容もどんどん具体化してきて TODO の全体像が見えるようになってきました。\n全体像が見えてきてしまえば、あとは適切な粒度に TODO を切り分けてひたすら消化していくだけなので、無駄に意識が TODO に向かってしまい気力が消耗していかないよう、サクサク片づけるように心がけました。\n段々 TODO の扱い方が分かってくると、常に一定以上は自分のために使える時間が作れるようになってきました。\n軽めのやりたいことは時間が出来れば自然にやれてた 意識するまでも無く時間が作れるようになってきてからは、新作ゲームや積読してた本に取り掛かることを意識せず自然にやってました。TODO 意識しちゃって新作楽しんでても心から楽しめないとかいう気持ちから脱することができる状況になったおかげで、自然と新たな行動が起こせるようになったからかもしれません。\n重めのやりたいことには必ず「自分のため」の理由付けを行う 例えばやりたいことを行う理由が「誰かに認められたい」とか「自分の価値を周りに認めてもらいたい」とか世間体を気にした動機になってしまっていると、そのやりたいことは他人が認めてくれて初めて達成となります。つまり、例えやりたいことが達成できたとしても、他人に評価してもらえない限りは未達の状態であり、その結果が気になって気力を消耗し続けます。\n私は上記のパターンに過去何度もハマり、やりたい TODO が達成できたはずなのに、その後 TODO に対する他人からの評価を常に気にし続けなければならず、無駄に気力が消費され続けて全くその後の行動が続いていかないという現象にハマっていました。\n例を言うと、例えば技術記事を書くとしたときに 「世間に新たな価値を提供したい」「誰かの役に立つような内容を意識する」「しっかり内容を書かないと記事にする意味が無い」 という他人から見られることを意識している動機づけは世間体や他者からの評価です。\nそれら一切度外視で、「文章書く練習のために書く」「後々また困りそうな技術的問題を自分が解決できるようにするために書く」「他の記事と内容が重複しても自分の勉強や理解を深めるために記事は書こう」 と自分の行動の動機を他人と切り離すことで、やりたい TODO を完了したときに「達成できた！満足！」という実感が即湧きます。\nやりたい TODO をちゃんと達成できたという実感は次の行動のモチベにも繋がっていくので、一石二鳥です。\nちなみに、やりたいことのモチベは 「なんとなく興味あってやりたいからやってみるけど飽きたら即止めよう」 という意識でも自分の行動の動機としては全然問題無かったです。そんな薄いモチベでも やり始めたら楽しくなってきてこだわり始めてやりたいことの精度や質がグングン上がっていき、継続して取り組める趣味となることも経験しました。\n自分の具体例で言うと、その程度のモチベで始めたことである普段飲むコーヒーの質向上が、結果、自家焙煎とか豆のブレンド比率にこだわり始めたところまで来ていて飽きずに今でも続けられています。\nその結果 Photo by Jorge Gonzalez on Unsplash\nそうして、やりたくない TODO の総量を減らして使える時間が増えていくと、最初のほうは時間を浪費していた時の行動となんら変わりない行動をしてしまうのですが、、ふとした瞬間に、それらの浪費行動に飽きるタイミングが来ます。暇すぎたり飽きに耐えきれなくなってきて、気力も十分に蓄えられてくると、ふとした瞬間に「やろうと思ってたことやってみるか」という感情に僕はなりました。\nむしろ、そういう感情になるまでは、仕事プライベート問わず TODO を減らし続けたり、遠慮なくダラケまくってボーッとしまくって休息する時間が必要なのかもしれません。\nあとは、気力は体力と同じく有限であるが、無くなっている状態が慢性的に続くと、それに気づくことすら出来ない。更に失った気力を回復するのには結構時間がかかる (1週間とかの単位) ということに気づくことが出来ました。\n私は気力を失っているかどうかの判断軸として、何かをやりたいと思えてたはずなのに「今は忙しいからな」とか「途中でやめそう」とか保守的なモードに入って行動が起こせなくなっていたら、気力が失われていると判断しています。 そうなっていたら、休息だけでなく TODO の総量も同時並行で減らすように心がけています。\n「2」がお題の時の web1week の時に参加出来なかったのは、まさにやりたいと思っていたのに、上記の保守的なモードに入っていたので行動に移せず終わってしまった感じでした。\nまた私は前述してきた内容を意識してきた結果、下記の以前からやりたいと思っていたことを自然に達成できました。\n ライブラリを作成して外部に公開できた ボリュームが大きいブログ記事を書くことができた OSS 活動に関わりライブラリの問題を解決することができた 自分のブログを作成して公開することができた  これらは世間体や他人の目、TODO などを気にせず、自分の意志のみにフォーカスして活動できるようになったことが大きく起因していると感じています。\nおわりに My pictures are CC0. When doing composings:によるPixabayからの画像\nまとめると、私にとっては下記が重要だったということになりそうです。\n 仕事やプライベートや大小や重要度関係なく TODO の総量はとにかく減らす  やりたいことがあっても時間や心労が原因でできていないのであれば、まずは自分のために使える時間を増やすことにだけ、ひたすら意識を傾ける   世間体や他者からの評価をモチベの糧にするような行動は決して起こさない  それで一時的に行動できていたとしても評価されないと気力を消費し続ける原因になってしまい、モチベや行動が後に続いていかない   気力の消費には自分で気づくことは難しいので常に余力が持てるよう意識し続ける  何かやりたいことがあるなら、他者に縛られる時間や仕事プライベートにおける TODO の総量を極力減らしていく   無意識に気力を削ぎ取ってくる外部要因は意識的に排除していく (フォロワーの数や SNS での反応等々)  今回 ノリでアドベントカレンダーに参加できたのも、上記が達成できていたからだと思います。(気力が十分にあって、世間体等を気にせず、自分が記事を書いてみたいと思ったから参加できた)\nもちろん、この記事が誰かの参考になれれば物凄く嬉しいは嬉しいのですが。。ｗ\nまた最近は行動を起こすにもインプットの量が足りてないとアウトプットしたいものも無くなってくるなと感じているので、自分が本当にやりたいことの総量を増やして、アウトプットを増やすことで人生を純粋に楽しむためにも、インプットの量を意識的に増やしていっています。\nちなみに私がモチベや記事に書いている内容を意識し始めたキッカケは教育心理学を学ぶ会で購入した理論と事例でわかるモチベーションですので、本記事内容にご興味お持ちいただいた方は是非チェックしてみてください。著者は kawagoi さん です。\n最後にこのような機会を用意してくれた だらさん に感謝して終わりたいと思います。\n","permalink":"https://nikaera.com/archives/birthday-2020/","summary":"はじめに まず、私の誕生日は 11/6 なので本日 12/6 は誕生日からちょうど 1ヶ月後になります。\n誕生日なので何か書くことにした✍️ | なんでもに参加しました！ https://t.co/1NXySfMlak #Crieit #crieit_advent_calendar @crieitcommunityより\n\u0026mdash; 𝚗𝚒𝚔𝚊𝚎𝚛𝚊 (@n1kaera) November 2, 2020  はい。完全にノリで参加しようと投稿予約してから、後日確認して気づきました。。ｗ しかし、その間違えに気づいてから、何を投稿しようかなあと考え始めた時に、ふと「以前の自分だったら絶対ノリでアドベントカレンダーに登録するっていう行動しないよなあ」ということに気づきました。\nそこで、今回は以前の自分と比較して、今の自分がどう変わったのか考察してみることにしました。この記事書いてるときは誕生日からまだ 1週間経ってないし、ちょうど考察するには良い機会かなと思って。\n以前の自分 Photo by Luis Villasmil on Unsplash\n以前はやりたいことがあっても全部後回しにしてしまっていました。何故かと言うと仕事やプライベートも含めて、他に直近でやらなければならない、もしくはそう思いこんでいる TODO があったときに、それらが残っていると次々に心配事や考え事が増えていってしまい、やりたいことに集中出来なくなるからです。\nつまり、やりたいことは本気で集中できるタイミングが来たらやろうと考えていました。\nそのため、読もうと思って買った本を読みたい、買って届いた新作ゲームをやりたい、OSS 活動をしてみたい、ライブラリを自分で作成してみたい等々のやりたいことは全て後回しになっていました。\n何も考えないでサクッと取り組めるプレイ済みのゲームを遊んだり、気に入っている Youtube の動画を何度も繰り返し見たりして時間を浪費していました。\nボーッとしながら何も考えないで過ごす時間や遊ぶ時間は気力を養う上で重要で必要だと認識しているのですが、それだけを余暇に費やすのは少し勿体ないなと感じていました。\nそして、ある時ふと気づきました。多分このままの生活してると連休とか仕事の区切りのタイミングとかでしか、自分がやりたいことに取り組むことはできないなと。。ちなみに、私はいわゆる ON/OFF みたいな切り替えが出来ないタイプなので、「仕事が終わったらスイッチを OFF にしてプライベートを全力で楽しむようにする」とかは無理なタイプです。\nそこで、過去自分が気分がノリ続けて作業できたり、新しいことに挑戦し始めたときのことを思い返しながら、現状改善のために簡単に出来ることからやってみようと 1年前くらい前から行動を起こし始めました。\n試したこと Free-PhotosによるPixabayからの画像\nまず、前提として下記項目はあえて頑張って解決するとかは諦めました。理由は中学生くらいの時から「そうだったなあ」って感じていることだったので潔く諦めた感じです。\n 仕事プライベート関係なく、やりたくない面倒な TODO を意識してしまい無駄に疲れる  ふとした瞬間に思い出して不快になるかつ、それらの TODO は後回しにしてしまいがちなので、更に不快になる機会が増えてきて、結果疲れ続ける   やるべき必要がある TODO が増えてくると最優先で迅速に全部片付けたくなる  それらが意識の端にあると心を休めた状態で日々を過ごすことが難しくなってきて、結果疲れ続ける    上記の解決を諦めても、やりたいことが自然と出来る環境が作れるようにしようとしました。","title":"📔 誕生日のノリでアドベントカレンダーに投稿予約して感じた変化"},{"content":"Blog 📝  Qiita  軽めの内容の記事を書くのに Qiita を利用しています   Zenn  整理整頓した記事を書くのに Zenn を利用しています    What I made 🔨  Bloggimg  ブログを書く用途に特化した Gyazo を用いた画像管理ツール   Zenn.badge  Zenn のスコアを GitHub 風のバッジに変換するサービス   selekted.club  tumblr の音と映像のフィードを連続再生できる Web サービス   立体ホームラン競争  web1week の時に作成した Web で出来る 3D ゲーム   チャレンジカレンダー  web1week の時に作成した 30Days Challenge が作成できる Web サービス   精密適正テスト  unity1week の時に作成したゲーム   バーチャル食べ放題  unity1week の時に作成したゲーム    ","permalink":"https://nikaera.com/portfolio/","summary":"Blog 📝  Qiita  軽めの内容の記事を書くのに Qiita を利用しています   Zenn  整理整頓した記事を書くのに Zenn を利用しています    What I made 🔨  Bloggimg  ブログを書く用途に特化した Gyazo を用いた画像管理ツール   Zenn.badge  Zenn のスコアを GitHub 風のバッジに変換するサービス   selekted.club  tumblr の音と映像のフィードを連続再生できる Web サービス   立体ホームラン競争  web1week の時に作成した Web で出来る 3D ゲーム   チャレンジカレンダー  web1week の時に作成した 30Days Challenge が作成できる Web サービス   精密適正テスト  unity1week の時に作成したゲーム   バーチャル食べ放題  unity1week の時に作成したゲーム    ","title":"Portfolio 💼"},{"content":"開発者として 🔨 大学院時代は友人 2 人と一緒にチームを組んで Android/iPhone アプリ開発や Web サービス開発をしていました。また、受託として Android/iPhone アプリ開発を請け負っていました。そのおかげで今でも Objective-C はある程度は空で書けます。\n現在は AWS を用いたバックエンドの開発を主に行っています。様々な技術領域に興味がありゼネラリストの指向性が強いです。実際に人に使ってもらえるプロダクトを作ることや社会貢献可能なプロジェクトに参加することに興味があります。\n開発それ自体を楽しめる気質はあるものの、基本的には開発を課題解決のための手段として捉えています。0 からプロジェクトに関わる様々なことに携わりたいタイプの気質が強いエンジニアです。また、個々が苦手な部分を補いあいながら、遠慮なく改善点を指摘しあえて、楽しく心理的に安全に開発できるチームが好きです。\n個人開発はプロトレベルで自分が作ってみたいものを思いついたら作るみたいな感じでやってます。あとは web1week や unity1week に時間があれば参加しています。作ったものは基本全部 GitHub にアップしています。そこで得た知見は他の人のためにもなれれば嬉しいなということで、Qiita や Zenn にまとめています。\n1 つの会社に所属して個人で技術力を高めていくことに限界を感じているので、開発チームへのお誘い等あれば、是非 Contact からお誘い頂けると嬉しいです。 ひととなりは 個人として からご確認いただけます。\nまた、あまり有効活用できておりませんが Lapras を利用しています。自分の能力値が可視化される感じがゲームやってるみたいで楽しいです。\n個人として 🚶‍♂️ 長男です。人生で大切なことは大体ゲームから学びました。小学生の時から引きこもって仕事できる環境に憧れていました。現在は無事それが叶う環境で働けていて満足しています。ガラスのハートの持ち主で HSP の気質があるかもしれません。\n特に下記の傾向が顕著にあります。\n 動揺するような状況を避けることを、普段の生活で最優先している 仕事をする時、競争させられたり、観察されていると、緊張し、いつもの実力を発揮できなくなる   社会人になってからは、会食恐怖症 の気も出てきましたが、なんとか元気にやってます。このような人間なので、仕事もプライベートもできるだけストレスが無い状態を保つよう心がけています。生きるの大変。\n最近は自己開示して積極的に弱みをさらけ出し、周囲の理解得ることでだいぶ生きやすくはなってきました。更に自己開示の副次的効果として、あまり動揺するようなことも無くなってきました。\n基本的に孤独を愛する傾向にありますが、Death Stranding をプレイしてからは 考え方は若干変わりました 。気の合う大切な仲間との関係性にフォーカスして仲を深くすることを大切にするタイプです。\n好きなこと 🌟 趣味はコンシューマーゲームと音楽とコーヒーで、ベースギターと読書と個人開発も好きです。\nゲームのジャンルは雑多に好きで PlayStation Store とか My Nintendo Store とか酒飲んで流し見しながら、インディーゲーとか含めて頻繁にジャケ買いしたりしています。最近はそのせいで積みゲーが増えているのが悩みです。\n音楽もジャンルは雑多に好きですが、ずっと昔から好きなアーティストに Nikakoi と erast がいます。そう考えると IDM のジャンルが特に好きかもしれないです。気になる音楽のインプット/アウトプットは tumblr で行っています。\nコーヒーは大好きで 1 日に 5 杯とか飲みます。生豆を買って自家焙煎も行っていますが、迂闊にもストックしていた生豆が切れてしまったときは届くまでの繋ぎとして やなか珈琲 とかに豆を買いに行ったりします。つまり、やなか珈琲の豆が好みです。\nベースギターは社会人になってから始めました。ベースギターを始めた動機は近所迷惑にならなそうだったからです。あと裏方が好きなのも関係しているかもしれません。プレイヤーとしては Joe Dart に憧れてます。 エレキギターは高校の時から社会人になるまではやっていました。\n読書はジャンルとしてはハード SF がめさくさ好きです。実用書や技術書も好きで読みますが、長時間読んでも飽きずに永遠に読み続けられるのはハード SF です。今まで読んだ本は 読書メーター にまとめています。\n","permalink":"https://nikaera.com/profile/","summary":"開発者として 🔨 大学院時代は友人 2 人と一緒にチームを組んで Android/iPhone アプリ開発や Web サービス開発をしていました。また、受託として Android/iPhone アプリ開発を請け負っていました。そのおかげで今でも Objective-C はある程度は空で書けます。\n現在は AWS を用いたバックエンドの開発を主に行っています。様々な技術領域に興味がありゼネラリストの指向性が強いです。実際に人に使ってもらえるプロダクトを作ることや社会貢献可能なプロジェクトに参加することに興味があります。\n開発それ自体を楽しめる気質はあるものの、基本的には開発を課題解決のための手段として捉えています。0 からプロジェクトに関わる様々なことに携わりたいタイプの気質が強いエンジニアです。また、個々が苦手な部分を補いあいながら、遠慮なく改善点を指摘しあえて、楽しく心理的に安全に開発できるチームが好きです。\n個人開発はプロトレベルで自分が作ってみたいものを思いついたら作るみたいな感じでやってます。あとは web1week や unity1week に時間があれば参加しています。作ったものは基本全部 GitHub にアップしています。そこで得た知見は他の人のためにもなれれば嬉しいなということで、Qiita や Zenn にまとめています。\n1 つの会社に所属して個人で技術力を高めていくことに限界を感じているので、開発チームへのお誘い等あれば、是非 Contact からお誘い頂けると嬉しいです。 ひととなりは 個人として からご確認いただけます。\nまた、あまり有効活用できておりませんが Lapras を利用しています。自分の能力値が可視化される感じがゲームやってるみたいで楽しいです。\n個人として 🚶‍♂️ 長男です。人生で大切なことは大体ゲームから学びました。小学生の時から引きこもって仕事できる環境に憧れていました。現在は無事それが叶う環境で働けていて満足しています。ガラスのハートの持ち主で HSP の気質があるかもしれません。\n特に下記の傾向が顕著にあります。\n 動揺するような状況を避けることを、普段の生活で最優先している 仕事をする時、競争させられたり、観察されていると、緊張し、いつもの実力を発揮できなくなる   社会人になってからは、会食恐怖症 の気も出てきましたが、なんとか元気にやってます。このような人間なので、仕事もプライベートもできるだけストレスが無い状態を保つよう心がけています。生きるの大変。\n最近は自己開示して積極的に弱みをさらけ出し、周囲の理解得ることでだいぶ生きやすくはなってきました。更に自己開示の副次的効果として、あまり動揺するようなことも無くなってきました。\n基本的に孤独を愛する傾向にありますが、Death Stranding をプレイしてからは 考え方は若干変わりました 。気の合う大切な仲間との関係性にフォーカスして仲を深くすることを大切にするタイプです。\n好きなこと 🌟 趣味はコンシューマーゲームと音楽とコーヒーで、ベースギターと読書と個人開発も好きです。\nゲームのジャンルは雑多に好きで PlayStation Store とか My Nintendo Store とか酒飲んで流し見しながら、インディーゲーとか含めて頻繁にジャケ買いしたりしています。最近はそのせいで積みゲーが増えているのが悩みです。\n音楽もジャンルは雑多に好きですが、ずっと昔から好きなアーティストに Nikakoi と erast がいます。そう考えると IDM のジャンルが特に好きかもしれないです。気になる音楽のインプット/アウトプットは tumblr で行っています。","title":"Profile 👦"},{"content":"","permalink":"https://nikaera.com/contact/","summary":"nikaera への問い合わせページ","title":"Contact 📥"},{"content":"","permalink":"https://nikaera.com/rss_feeds/","summary":"自分の技術記事の RSS Feed","title":"RSS Feeds 🔖"}]